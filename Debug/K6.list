
K6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08007210  08007210  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007210  08007210  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047c0  20000020  08007238  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047e0  08007238  000247e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee7f  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022c9  00000000  00000000  0002eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00031198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e00  00000000  00000000  000320c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018732  00000000  00000000  00032ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cfbf  00000000  00000000  0004b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089f5c  00000000  00000000  000585b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e250d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea8  00000000  00000000  000e2588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08006c14 	.word	0x08006c14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08006c14 	.word	0x08006c14

0800014c <LED_ALL_ON>:
	char buffer[1024];
	uint32_t bytesread;
	uint8_t n;

void LED_ALL_ON (void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000150:	2201      	movs	r2, #1
 8000152:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8000156:	4805      	ldr	r0, [pc, #20]	; (800016c <LED_ALL_ON+0x20>)
 8000158:	f000 ff24 	bl	8000fa4 <HAL_GPIO_WritePin>
            |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, 1);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 8000162:	4803      	ldr	r0, [pc, #12]	; (8000170 <LED_ALL_ON+0x24>)
 8000164:	f000 ff1e 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	40010c00 	.word	0x40010c00
 8000170:	40010800 	.word	0x40010800

08000174 <LED_TWO>:
void LED_TWO (void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6
 8000178:	2201      	movs	r2, #1
 800017a:	f24a 1150 	movw	r1, #41296	; 0xa150
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <LED_TWO+0x20>)
 8000180:	f000 ff10 	bl	8000fa4 <HAL_GPIO_WritePin>
	            |GPIO_PIN_8, 1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 800018a:	4803      	ldr	r0, [pc, #12]	; (8000198 <LED_TWO+0x24>)
 800018c:	f000 ff0a 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8000190:	bf00      	nop
 8000192:	bd80      	pop	{r7, pc}
 8000194:	40010c00 	.word	0x40010c00
 8000198:	40010800 	.word	0x40010800

0800019c <LED_THREE>:
void LED_THREE (void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f245 21a8 	movw	r1, #21160	; 0x52a8
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <LED_THREE+0x20>)
 80001a8:	f000 fefc 	bl	8000fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, 1);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <LED_THREE+0x24>)
 80001b4:	f000 fef6 	bl	8000fa4 <HAL_GPIO_WritePin>

}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	40010800 	.word	0x40010800

080001c4 <LED_ALL_OFF>:
void LED_ALL_OFF (void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80001c8:	2200      	movs	r2, #0
 80001ca:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 80001ce:	4805      	ldr	r0, [pc, #20]	; (80001e4 <LED_ALL_OFF+0x20>)
 80001d0:	f000 fee8 	bl	8000fa4 <HAL_GPIO_WritePin>
	            |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, 0);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, 0);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <LED_ALL_OFF+0x24>)
 80001dc:	f000 fee2 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	40010c00 	.word	0x40010c00
 80001e8:	40010800 	.word	0x40010800

080001ec <play_music>:
uint8_t play_music (uint8_t playing)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	uint8_t bai = playing;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	fres = f_mount ( &fs ,  "" ,   1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	495c      	ldr	r1, [pc, #368]	; (8000370 <play_music+0x184>)
 8000200:	485c      	ldr	r0, [pc, #368]	; (8000374 <play_music+0x188>)
 8000202:	f005 fd75 	bl	8005cf0 <f_mount>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b5b      	ldr	r3, [pc, #364]	; (8000378 <play_music+0x18c>)
 800020c:	701a      	strb	r2, [r3, #0]
	    	      	   while ( fres !=  FR_OK )
 800020e:	e00b      	b.n	8000228 <play_music+0x3c>
	    	      	   {
	    	      	 	  fres = f_mount ( &fs ,  "" ,   1);
 8000210:	2201      	movs	r2, #1
 8000212:	4957      	ldr	r1, [pc, #348]	; (8000370 <play_music+0x184>)
 8000214:	4857      	ldr	r0, [pc, #348]	; (8000374 <play_music+0x188>)
 8000216:	f005 fd6b 	bl	8005cf0 <f_mount>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b56      	ldr	r3, [pc, #344]	; (8000378 <play_music+0x18c>)
 8000220:	701a      	strb	r2, [r3, #0]
	    	      	 	  HAL_Delay(100);
 8000222:	2064      	movs	r0, #100	; 0x64
 8000224:	f000 fc34 	bl	8000a90 <HAL_Delay>
	    	      	   while ( fres !=  FR_OK )
 8000228:	4b53      	ldr	r3, [pc, #332]	; (8000378 <play_music+0x18c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1ef      	bne.n	8000210 <play_music+0x24>
	    	      	   }
/* Open file */

	switch (n)
 8000230:	4b52      	ldr	r3, [pc, #328]	; (800037c <play_music+0x190>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b02      	cmp	r3, #2
 8000236:	d014      	beq.n	8000262 <play_music+0x76>
 8000238:	2b03      	cmp	r3, #3
 800023a:	d023      	beq.n	8000284 <play_music+0x98>
 800023c:	2b01      	cmp	r3, #1
 800023e:	d137      	bne.n	80002b0 <play_music+0xc4>
	{
	case 1:
		fres = f_open(&file, "music1.wav", FA_READ);
 8000240:	2201      	movs	r2, #1
 8000242:	494f      	ldr	r1, [pc, #316]	; (8000380 <play_music+0x194>)
 8000244:	484f      	ldr	r0, [pc, #316]	; (8000384 <play_music+0x198>)
 8000246:	f005 fd9d 	bl	8005d84 <f_open>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	4b4a      	ldr	r3, [pc, #296]	; (8000378 <play_music+0x18c>)
 8000250:	701a      	strb	r2, [r3, #0]
		LED_ALL_ON();
 8000252:	f7ff ff7b 	bl	800014c <LED_ALL_ON>
						    if (fres != FR_OK)
 8000256:	4b48      	ldr	r3, [pc, #288]	; (8000378 <play_music+0x18c>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d023      	beq.n	80002a6 <play_music+0xba>
						    	  {
						  	  	  return 1;
 800025e:	2301      	movs	r3, #1
 8000260:	e082      	b.n	8000368 <play_music+0x17c>
						  	  	  f_close(&file);
						    	  }
		break;
	case 2:
			fres = f_open(&file, "music2.wav", FA_READ);
 8000262:	2201      	movs	r2, #1
 8000264:	4948      	ldr	r1, [pc, #288]	; (8000388 <play_music+0x19c>)
 8000266:	4847      	ldr	r0, [pc, #284]	; (8000384 <play_music+0x198>)
 8000268:	f005 fd8c 	bl	8005d84 <f_open>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	4b41      	ldr	r3, [pc, #260]	; (8000378 <play_music+0x18c>)
 8000272:	701a      	strb	r2, [r3, #0]
			LED_TWO();
 8000274:	f7ff ff7e 	bl	8000174 <LED_TWO>
							    if (fres != FR_OK)
 8000278:	4b3f      	ldr	r3, [pc, #252]	; (8000378 <play_music+0x18c>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d014      	beq.n	80002aa <play_music+0xbe>
							    	  {
							  	  	  return 1;
 8000280:	2301      	movs	r3, #1
 8000282:	e071      	b.n	8000368 <play_music+0x17c>
							  	  	  f_close(&file);
							    	  }
			break;
	case 3:
			fres = f_open(&file, "music3.wav", FA_READ);
 8000284:	2201      	movs	r2, #1
 8000286:	4941      	ldr	r1, [pc, #260]	; (800038c <play_music+0x1a0>)
 8000288:	483e      	ldr	r0, [pc, #248]	; (8000384 <play_music+0x198>)
 800028a:	f005 fd7b 	bl	8005d84 <f_open>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b39      	ldr	r3, [pc, #228]	; (8000378 <play_music+0x18c>)
 8000294:	701a      	strb	r2, [r3, #0]
			LED_THREE();
 8000296:	f7ff ff81 	bl	800019c <LED_THREE>
							    if (fres != FR_OK)
 800029a:	4b37      	ldr	r3, [pc, #220]	; (8000378 <play_music+0x18c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d005      	beq.n	80002ae <play_music+0xc2>
							    	  {
							  	  	  return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e060      	b.n	8000368 <play_music+0x17c>
		break;
 80002a6:	bf00      	nop
 80002a8:	e002      	b.n	80002b0 <play_music+0xc4>
			break;
 80002aa:	bf00      	nop
 80002ac:	e000      	b.n	80002b0 <play_music+0xc4>
							  	  	  f_close(&file);
							    	  }
			break;
 80002ae:	bf00      	nop
	}

  /* Read header */
  uint8_t header[44];
  pres = f_read(&file, header, sizeof(header), &bytesread);
 80002b0:	f107 010c 	add.w	r1, r7, #12
 80002b4:	4b36      	ldr	r3, [pc, #216]	; (8000390 <play_music+0x1a4>)
 80002b6:	222c      	movs	r2, #44	; 0x2c
 80002b8:	4832      	ldr	r0, [pc, #200]	; (8000384 <play_music+0x198>)
 80002ba:	f006 f89d 	bl	80063f8 <f_read>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b34      	ldr	r3, [pc, #208]	; (8000394 <play_music+0x1a8>)
 80002c4:	701a      	strb	r2, [r3, #0]
    if (pres != FR_OK)
 80002c6:	4b33      	ldr	r3, [pc, #204]	; (8000394 <play_music+0x1a8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03c      	beq.n	8000348 <play_music+0x15c>
    {
  	  f_close(&file);
 80002ce:	482d      	ldr	r0, [pc, #180]	; (8000384 <play_music+0x198>)
 80002d0:	f006 fb86 	bl	80069e0 <f_close>
  	  return 2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	e047      	b.n	8000368 <play_music+0x17c>
    }
  /*Read data */

  while (f_eof (&file) == 0  )
  {
	  if (bai != n)
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <play_music+0x190>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d006      	beq.n	80002f2 <play_music+0x106>
	  {
			LED_ALL_OFF();
 80002e4:	f7ff ff6e 	bl	80001c4 <LED_ALL_OFF>
		  f_close(&file);
 80002e8:	4826      	ldr	r0, [pc, #152]	; (8000384 <play_music+0x198>)
 80002ea:	f006 fb79 	bl	80069e0 <f_close>
		        return 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	e03a      	b.n	8000368 <play_music+0x17c>
	  }
	  uint8_t data[1];
	  res = f_read(&file, data, sizeof(data), &bytesread);
 80002f2:	f107 0108 	add.w	r1, r7, #8
 80002f6:	4b26      	ldr	r3, [pc, #152]	; (8000390 <play_music+0x1a4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	4822      	ldr	r0, [pc, #136]	; (8000384 <play_music+0x198>)
 80002fc:	f006 f87c 	bl	80063f8 <f_read>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <play_music+0x1ac>)
 8000306:	701a      	strb	r2, [r3, #0]
	    if (res != FR_OK)
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <play_music+0x1ac>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d004      	beq.n	800031a <play_music+0x12e>
	    	  {
	  	  	  f_close(&file);
 8000310:	481c      	ldr	r0, [pc, #112]	; (8000384 <play_music+0x198>)
 8000312:	f006 fb65 	bl	80069e0 <f_close>
	  	  	  return 2;
 8000316:	2302      	movs	r3, #2
 8000318:	e026      	b.n	8000368 <play_music+0x17c>
	    	  }

  /* PWM */

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 255 - data[0]);
 800031a:	7a3b      	ldrb	r3, [r7, #8]
 800031c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <play_music+0x1b0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 255 - data[0]);
 8000326:	7a3b      	ldrb	r3, [r7, #8]
 8000328:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <play_music+0x1b0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	641a      	str	r2, [r3, #64]	; 0x40
  for(int a = 0; a <400; a++)
 8000332:	2300      	movs	r3, #0
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000336:	e003      	b.n	8000340 <play_music+0x154>
  	  asm("NOP");
 8000338:	bf00      	nop
  for(int a = 0; a <400; a++)
 800033a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033c:	3301      	adds	r3, #1
 800033e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000342:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000346:	dbf7      	blt.n	8000338 <play_music+0x14c>
  while (f_eof (&file) == 0  )
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <play_music+0x198>)
 800034a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800034e:	3308      	adds	r3, #8
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <play_music+0x198>)
 8000354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000358:	330c      	adds	r3, #12
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d1bb      	bne.n	80002d8 <play_music+0xec>

  }
    f_close(&file);
 8000360:	4808      	ldr	r0, [pc, #32]	; (8000384 <play_music+0x198>)
 8000362:	f006 fb3d 	bl	80069e0 <f_close>
      return 0;
 8000366:	2300      	movs	r3, #0
}
 8000368:	4618      	mov	r0, r3
 800036a:	3740      	adds	r7, #64	; 0x40
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	08006c2c 	.word	0x08006c2c
 8000374:	20000270 	.word	0x20000270
 8000378:	20002771 	.word	0x20002771
 800037c:	2000026d 	.word	0x2000026d
 8000380:	08006c30 	.word	0x08006c30
 8000384:	200012ec 	.word	0x200012ec
 8000388:	08006c3c 	.word	0x08006c3c
 800038c:	08006c48 	.word	0x08006c48
 8000390:	200012a0 	.word	0x200012a0
 8000394:	2000026c 	.word	0x2000026c
 8000398:	20002770 	.word	0x20002770
 800039c:	200012a4 	.word	0x200012a4

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 fb12 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f81a 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 f8f8 	bl	80005a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003b0:	f000 f85c 	bl	800046c <MX_SPI1_Init>
  MX_FATFS_Init();
 80003b4:	f002 fa42 	bl	800283c <MX_FATFS_Init>
  MX_TIM3_Init();
 80003b8:	f000 f88e 	bl	80004d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003bc:	2108      	movs	r1, #8
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <main+0x38>)
 80003c0:	f001 fe70 	bl	80020a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003c4:	210c      	movs	r1, #12
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <main+0x38>)
 80003c8:	f001 fe6c 	bl	80020a4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		play_music(n);
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <main+0x3c>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff0b 	bl	80001ec <play_music>
 80003d6:	e7f9      	b.n	80003cc <main+0x2c>
 80003d8:	200012a4 	.word	0x200012a4
 80003dc:	2000026d 	.word	0x2000026d

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b090      	sub	sp, #64	; 0x40
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0318 	add.w	r3, r7, #24
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f006 fc08 	bl	8006c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	2301      	movs	r3, #1
 8000412:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000414:	2302      	movs	r3, #2
 8000416:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000422:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fdeb 	bl	8001004 <HAL_RCC_OscConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000434:	f000 f95a 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	230f      	movs	r3, #15
 800043a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043c:	2302      	movs	r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f001 f856 	bl	8001504 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800045e:	f000 f945 	bl	80006ec <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3740      	adds	r7, #64	; 0x40
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <MX_SPI1_Init+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800047c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b8:	220a      	movs	r2, #10
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004be:	f001 f98b 	bl	80017d8 <HAL_SPI_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004c8:	f000 f910 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20002718 	.word	0x20002718
 80004d4:	40013000 	.word	0x40013000

080004d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <MX_TIM3_Init+0xc0>)
 80004fc:	4a27      	ldr	r2, [pc, #156]	; (800059c <MX_TIM3_Init+0xc4>)
 80004fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000500:	4b25      	ldr	r3, [pc, #148]	; (8000598 <MX_TIM3_Init+0xc0>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <MX_TIM3_Init+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800050c:	4b22      	ldr	r3, [pc, #136]	; (8000598 <MX_TIM3_Init+0xc0>)
 800050e:	22ff      	movs	r2, #255	; 0xff
 8000510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_TIM3_Init+0xc0>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_TIM3_Init+0xc0>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800051e:	481e      	ldr	r0, [pc, #120]	; (8000598 <MX_TIM3_Init+0xc0>)
 8000520:	f001 fd70 	bl	8002004 <HAL_TIM_PWM_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800052a:	f000 f8df 	bl	80006ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	4619      	mov	r1, r3
 800053c:	4816      	ldr	r0, [pc, #88]	; (8000598 <MX_TIM3_Init+0xc0>)
 800053e:	f002 f91f 	bl	8002780 <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000548:	f000 f8d0 	bl	80006ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054c:	2360      	movs	r3, #96	; 0x60
 800054e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2208      	movs	r2, #8
 8000560:	4619      	mov	r1, r3
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <MX_TIM3_Init+0xc0>)
 8000564:	f001 fe40 	bl	80021e8 <HAL_TIM_PWM_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800056e:	f000 f8bd 	bl	80006ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	220c      	movs	r2, #12
 8000576:	4619      	mov	r1, r3
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <MX_TIM3_Init+0xc0>)
 800057a:	f001 fe35 	bl	80021e8 <HAL_TIM_PWM_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000584:	f000 f8b2 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <MX_TIM3_Init+0xc0>)
 800058a:	f000 f94d 	bl	8000828 <HAL_TIM_MspPostInit>

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200012a4 	.word	0x200012a4
 800059c:	40000400 	.word	0x40000400

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b4:	4b3a      	ldr	r3, [pc, #232]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a39      	ldr	r2, [pc, #228]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0320 	and.w	r3, r3, #32
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a33      	ldr	r2, [pc, #204]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0x100>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005fc:	2200      	movs	r2, #0
 80005fe:	f649 7110 	movw	r1, #40720	; 0x9f10
 8000602:	4828      	ldr	r0, [pc, #160]	; (80006a4 <MX_GPIO_Init+0x104>)
 8000604:	f000 fcce 	bl	8000fa4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000608:	2200      	movs	r2, #0
 800060a:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 800060e:	4826      	ldr	r0, [pc, #152]	; (80006a8 <MX_GPIO_Init+0x108>)
 8000610:	f000 fcc8 	bl	8000fa4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000614:	230e      	movs	r3, #14
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_GPIO_Init+0x10c>)
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <MX_GPIO_Init+0x104>)
 8000628:	f000 fb62 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800062c:	f649 7310 	movw	r3, #40720	; 0x9f10
 8000630:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <MX_GPIO_Init+0x104>)
 8000646:	f000 fb53 	bl	8000cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800064a:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 800064e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <MX_GPIO_Init+0x108>)
 8000664:	f000 fb44 	bl	8000cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2007      	movs	r0, #7
 800066e:	f000 fb08 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000672:	2007      	movs	r0, #7
 8000674:	f000 fb21 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2008      	movs	r0, #8
 800067e:	f000 fb00 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000682:	2008      	movs	r0, #8
 8000684:	f000 fb19 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2009      	movs	r0, #9
 800068e:	f000 faf8 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000692:	2009      	movs	r0, #9
 8000694:	f000 fb11 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	10210000 	.word	0x10210000

080006b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1)
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d102      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x16>
		n =1 ;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_2)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d102      	bne.n	80006d2 <HAL_GPIO_EXTI_Callback+0x22>
		n =2;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_3)
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d102      	bne.n	80006de <HAL_GPIO_EXTI_Callback+0x2e>
		n =3 ;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x38>)
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]

}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	2000026d 	.word	0x2000026d

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x6>

080006f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <HAL_SPI_MspInit+0x88>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d12f      	bne.n	80007d8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 800077e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <HAL_SPI_MspInit+0x8c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_SPI_MspInit+0x90>)
 80007bc:	f000 fa98 	bl	8000cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_SPI_MspInit+0x90>)
 80007d4:	f000 fa8c 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013000 	.word	0x40013000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_TIM_PWM_MspInit+0x34>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d10b      	bne.n	8000816 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_TIM_PWM_MspInit+0x38>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_TIM_PWM_MspInit+0x38>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	61d3      	str	r3, [r2, #28]
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_TIM_PWM_MspInit+0x38>)
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40000400 	.word	0x40000400
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_TIM_MspPostInit+0x58>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d117      	bne.n	8000878 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_TIM_MspPostInit+0x5c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_TIM_MspPostInit+0x5c>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_TIM_MspPostInit+0x5c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000860:	2303      	movs	r3, #3
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_TIM_MspPostInit+0x60>)
 8000874:	f000 fa3c 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40000400 	.word	0x40000400
 8000884:	40021000 	.word	0x40021000
 8000888:	40010c00 	.word	0x40010c00

0800088c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint16_t Timer1, Timer2;
void SDTimer_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	if (Timer1>0)
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <SDTimer_Handler+0x3c>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d006      	beq.n	80008a8 <SDTimer_Handler+0x1c>
		Timer1--;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <SDTimer_Handler+0x3c>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <SDTimer_Handler+0x3c>)
 80008a6:	801a      	strh	r2, [r3, #0]
	if (Timer2>0)
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SDTimer_Handler+0x40>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d006      	beq.n	80008c0 <SDTimer_Handler+0x34>
		Timer2--;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SDTimer_Handler+0x40>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3b01      	subs	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <SDTimer_Handler+0x40>)
 80008be:	801a      	strh	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	20002774 	.word	0x20002774
 80008cc:	20002772 	.word	0x20002772

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
	...

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <SysTick_Handler+0x30>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	3301      	adds	r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <SysTick_Handler+0x30>)
 8000924:	701a      	strb	r2, [r3, #0]
			if (FatFsCnt >=10)
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <SysTick_Handler+0x30>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b09      	cmp	r3, #9
 800092e:	d904      	bls.n	800093a <SysTick_Handler+0x26>
			{
				FatFsCnt = 0;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Handler+0x30>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
				SDTimer_Handler();
 8000936:	f7ff ffa9 	bl	800088c <SDTimer_Handler>
			}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f88d 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000003c 	.word	0x2000003c

08000948 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800094c:	2002      	movs	r0, #2
 800094e:	f000 fb41 	bl	8000fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800095a:	2004      	movs	r0, #4
 800095c:	f000 fb3a 	bl	8000fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000968:	2008      	movs	r0, #8
 800096a:	f000 fb33 	bl	8000fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000980:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000982:	e003      	b.n	800098c <LoopCopyDataInit>

08000984 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000986:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000988:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800098a:	3104      	adds	r1, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000990:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000992:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000994:	d3f6      	bcc.n	8000984 <CopyDataInit>
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000998:	e002      	b.n	80009a0 <LoopFillZerobss>

0800099a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800099c:	f842 3b04 	str.w	r3, [r2], #4

080009a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009a4:	d3f9      	bcc.n	800099a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a6:	f7ff ffe4 	bl	8000972 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f006 f907 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fcf7 	bl	80003a0 <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r3, =_sidata
 80009b4:	08007218 	.word	0x08007218
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009bc:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80009c0:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80009c4:	200047e0 	.word	0x200047e0

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f945 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fe84 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f95d 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f925 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20002778 	.word	0x20002778

08000a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	20002778 	.word	0x20002778

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff0 	bl	8000a7c <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_Delay+0x40>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffe0 	bl	8000a7c <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4906      	ldr	r1, [pc, #24]	; (8000b6c <__NVIC_EnableIRQ+0x34>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff2d 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff42 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff35 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e127      	b.n	8000f54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8116 	bne.w	8000f4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d034      	beq.n	8000d94 <HAL_GPIO_Init+0xa4>
 8000d2a:	2b12      	cmp	r3, #18
 8000d2c:	d80d      	bhi.n	8000d4a <HAL_GPIO_Init+0x5a>
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d02b      	beq.n	8000d8a <HAL_GPIO_Init+0x9a>
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d804      	bhi.n	8000d40 <HAL_GPIO_Init+0x50>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d031      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d01c      	beq.n	8000d78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3e:	e048      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d043      	beq.n	8000dcc <HAL_GPIO_Init+0xdc>
 8000d44:	2b11      	cmp	r3, #17
 8000d46:	d01b      	beq.n	8000d80 <HAL_GPIO_Init+0x90>
          break;
 8000d48:	e043      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d4a:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <HAL_GPIO_Init+0x280>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d026      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
 8000d50:	4a87      	ldr	r2, [pc, #540]	; (8000f70 <HAL_GPIO_Init+0x280>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d806      	bhi.n	8000d64 <HAL_GPIO_Init+0x74>
 8000d56:	4a87      	ldr	r2, [pc, #540]	; (8000f74 <HAL_GPIO_Init+0x284>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d020      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
 8000d5c:	4a86      	ldr	r2, [pc, #536]	; (8000f78 <HAL_GPIO_Init+0x288>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d01d      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
          break;
 8000d62:	e036      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d64:	4a85      	ldr	r2, [pc, #532]	; (8000f7c <HAL_GPIO_Init+0x28c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d019      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
 8000d6a:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <HAL_GPIO_Init+0x290>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d016      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
 8000d70:	4a84      	ldr	r2, [pc, #528]	; (8000f84 <HAL_GPIO_Init+0x294>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0xae>
          break;
 8000d76:	e02c      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e028      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	3304      	adds	r3, #4
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e023      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	3308      	adds	r3, #8
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e01e      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	330c      	adds	r3, #12
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e019      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d102      	bne.n	8000dac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000da6:	2304      	movs	r3, #4
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e012      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d105      	bne.n	8000dc0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000db4:	2308      	movs	r3, #8
 8000db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69fa      	ldr	r2, [r7, #28]
 8000dbc:	611a      	str	r2, [r3, #16]
          break;
 8000dbe:	e008      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	615a      	str	r2, [r3, #20]
          break;
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	2bff      	cmp	r3, #255	; 0xff
 8000dd6:	d801      	bhi.n	8000ddc <HAL_GPIO_Init+0xec>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	e001      	b.n	8000de0 <HAL_GPIO_Init+0xf0>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3304      	adds	r3, #4
 8000de0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	2bff      	cmp	r3, #255	; 0xff
 8000de6:	d802      	bhi.n	8000dee <HAL_GPIO_Init+0xfe>
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_Init+0x104>
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3b08      	subs	r3, #8
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	401a      	ands	r2, r3
 8000e06:	6a39      	ldr	r1, [r7, #32]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 8096 	beq.w	8000f4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e22:	4b59      	ldr	r3, [pc, #356]	; (8000f88 <HAL_GPIO_Init+0x298>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a58      	ldr	r2, [pc, #352]	; (8000f88 <HAL_GPIO_Init+0x298>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <HAL_GPIO_Init+0x298>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <HAL_GPIO_Init+0x29c>)
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x19e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x19a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x196>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x192>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x1a0>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x1a0>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x1a0>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x1a0>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea0:	493a      	ldr	r1, [pc, #232]	; (8000f8c <HAL_GPIO_Init+0x29c>)
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d006      	beq.n	8000ec8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4938      	ldr	r1, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4933      	ldr	r1, [pc, #204]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	492e      	ldr	r1, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	604b      	str	r3, [r1, #4]
 8000eee:	e006      	b.n	8000efe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4929      	ldr	r1, [pc, #164]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	4924      	ldr	r1, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	608b      	str	r3, [r1, #8]
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	491f      	ldr	r1, [pc, #124]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	491a      	ldr	r1, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60cb      	str	r3, [r1, #12]
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f42:	68da      	ldr	r2, [r3, #12]
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	3301      	adds	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f47f aed0 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000f64:	bf00      	nop
 8000f66:	372c      	adds	r7, #44	; 0x2c
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	10210000 	.word	0x10210000
 8000f74:	10110000 	.word	0x10110000
 8000f78:	10120000 	.word	0x10120000
 8000f7c:	10310000 	.word	0x10310000
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10220000 	.word	0x10220000
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	40010800 	.word	0x40010800
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40011400 	.word	0x40011400
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	611a      	str	r2, [r3, #16]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb5c 	bl	80006b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e26c      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 8087 	beq.w	8001132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001024:	4b92      	ldr	r3, [pc, #584]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 030c 	and.w	r3, r3, #12
 800102c:	2b04      	cmp	r3, #4
 800102e:	d00c      	beq.n	800104a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001030:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b08      	cmp	r3, #8
 800103a:	d112      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
 800103c:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001048:	d10b      	bne.n	8001062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	4b89      	ldr	r3, [pc, #548]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d06c      	beq.n	8001130 <HAL_RCC_OscConfig+0x12c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d168      	bne.n	8001130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e246      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x76>
 800106c:	4b80      	ldr	r3, [pc, #512]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a7f      	ldr	r2, [pc, #508]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e02e      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x98>
 8001082:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b78      	ldr	r3, [pc, #480]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e01d      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0xbc>
 80010a6:	4b72      	ldr	r3, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a71      	ldr	r2, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a6e      	ldr	r2, [pc, #440]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0xd4>
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6a      	ldr	r2, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a67      	ldr	r2, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fccc 	bl	8000a7c <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fcc8 	bl	8000a7c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e1fa      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b5d      	ldr	r3, [pc, #372]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0xe4>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001108:	f7ff fcb8 	bl	8000a7c <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fcb4 	bl	8000a7c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1e6      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x10c>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d063      	beq.n	8001206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00b      	beq.n	8001162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b08      	cmp	r3, #8
 8001154:	d11c      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d116      	bne.n	8001190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e1ba      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4939      	ldr	r1, [pc, #228]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118e:	e03a      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fc6d 	bl	8000a7c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fc69 	bl	8000a7c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e19b      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	600b      	str	r3, [r1, #0]
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x270>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc4c 	bl	8000a7c <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc48 	bl	8000a7c <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e17a      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03a      	beq.n	8001288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d019      	beq.n	800124e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001220:	f7ff fc2c 	bl	8000a7c <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc28 	bl	8000a7c <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e15a      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_RCC_OscConfig+0x26c>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 faa8 	bl	800179c <RCC_Delay>
 800124c:	e01c      	b.n	8001288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_OscConfig+0x274>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001254:	f7ff fc12 	bl	8000a7c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125a:	e00f      	b.n	800127c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc0e 	bl	8000a7c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d908      	bls.n	800127c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e140      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	42420000 	.word	0x42420000
 8001278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b9e      	ldr	r3, [pc, #632]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e9      	bne.n	800125c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a6 	beq.w	80013e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b97      	ldr	r3, [pc, #604]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10d      	bne.n	80012c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b94      	ldr	r3, [pc, #592]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a93      	ldr	r2, [pc, #588]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b91      	ldr	r3, [pc, #580]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b8e      	ldr	r3, [pc, #568]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d118      	bne.n	8001300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b8b      	ldr	r3, [pc, #556]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a8a      	ldr	r2, [pc, #552]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fbcf 	bl	8000a7c <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e2:	f7ff fbcb 	bl	8000a7c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b64      	cmp	r3, #100	; 0x64
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0fd      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	4b81      	ldr	r3, [pc, #516]	; (80014fc <HAL_RCC_OscConfig+0x4f8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x312>
 8001308:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6213      	str	r3, [r2, #32]
 8001314:	e02d      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x334>
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4a75      	ldr	r2, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	4b73      	ldr	r3, [pc, #460]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a72      	ldr	r2, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	e01c      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0x356>
 8001340:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4a6c      	ldr	r2, [pc, #432]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6213      	str	r3, [r2, #32]
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0x36e>
 800135a:	4b67      	ldr	r3, [pc, #412]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	4b64      	ldr	r3, [pc, #400]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a63      	ldr	r2, [pc, #396]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137a:	f7ff fb7f 	bl	8000a7c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	e00a      	b.n	8001398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff fb7b 	bl	8000a7c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0ab      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001398:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0ee      	beq.n	8001382 <HAL_RCC_OscConfig+0x37e>
 80013a4:	e014      	b.n	80013d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fb69 	bl	8000a7c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ae:	f7ff fb65 	bl	8000a7c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013bc:	4293      	cmp	r3, r2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e095      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1ee      	bne.n	80013ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8081 	beq.w	80014ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d061      	beq.n	80014bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d146      	bne.n	800148e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fb39 	bl	8000a7c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff fb35 	bl	8000a7c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e067      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d108      	bne.n	8001448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	492d      	ldr	r1, [pc, #180]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a19      	ldr	r1, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	430b      	orrs	r3, r1
 800145a:	4927      	ldr	r1, [pc, #156]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001466:	f7ff fb09 	bl	8000a7c <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff fb05 	bl	8000a7c <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e037      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x46a>
 800148c:	e02f      	b.n	80014ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_RCC_OscConfig+0x4fc>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff faf2 	bl	8000a7c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff faee 	bl	8000a7c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e020      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x498>
 80014ba:	e018      	b.n	80014ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e013      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
 8001500:	42420060 	.word	0x42420060

08001504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0d0      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d910      	bls.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 0207 	bic.w	r2, r3, #7
 800152e:	4965      	ldr	r1, [pc, #404]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0b8      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001560:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	494d      	ldr	r1, [pc, #308]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d040      	beq.n	8001624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e07f      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e073      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06b      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e2:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 0203 	bic.w	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4936      	ldr	r1, [pc, #216]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff fa42 	bl	8000a7c <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7ff fa3e 	bl	8000a7c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e053      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 020c 	and.w	r2, r3, #12
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1eb      	bne.n	80015fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d210      	bcs.n	8001654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4922      	ldr	r1, [pc, #136]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e032      	b.n	80016ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4916      	ldr	r1, [pc, #88]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	490e      	ldr	r1, [pc, #56]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001692:	f000 f821 	bl	80016d8 <HAL_RCC_GetSysClockFreq>
 8001696:	4601      	mov	r1, r0
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	5cd3      	ldrb	r3, [r2, r3]
 80016a6:	fa21 f303 	lsr.w	r3, r1, r3
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <HAL_RCC_ClockConfig+0x1cc>)
 80016ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1d0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff f9a0 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08006cb0 	.word	0x08006cb0
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d8:	b490      	push	{r4, r7}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016e0:	1d3c      	adds	r4, r7, #4
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x40>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x46>
 8001716:	e02d      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 800171a:	623b      	str	r3, [r7, #32]
      break;
 800171c:	e02d      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800172a:	4413      	add	r3, r2
 800172c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001730:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_RCC_GetSysClockFreq+0xb8>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0c5b      	lsrs	r3, r3, #17
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800174a:	4413      	add	r3, r2
 800174c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001750:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001756:	fb02 f203 	mul.w	r2, r2, r3
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	e004      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	623b      	str	r3, [r7, #32]
      break;
 8001772:	e002      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001776:	623b      	str	r3, [r7, #32]
      break;
 8001778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177a:	6a3b      	ldr	r3, [r7, #32]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bc90      	pop	{r4, r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	08006c54 	.word	0x08006c54
 800178c:	08006c64 	.word	0x08006c64
 8001790:	40021000 	.word	0x40021000
 8001794:	007a1200 	.word	0x007a1200
 8001798:	003d0900 	.word	0x003d0900

0800179c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <RCC_Delay+0x34>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <RCC_Delay+0x38>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0a5b      	lsrs	r3, r3, #9
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017b8:	bf00      	nop
  }
  while (Delay --);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f9      	bne.n	80017b8 <RCC_Delay+0x1c>
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000000 	.word	0x20000000
 80017d4:	10624dd3 	.word	0x10624dd3

080017d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e076      	b.n	80018d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017fa:	d009      	beq.n	8001810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
 8001802:	e005      	b.n	8001810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ff94 	bl	8000758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	ea42 0103 	orr.w	r1, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	0c1a      	lsrs	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f002 0204 	and.w	r2, r2, #4
 80018b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_SPI_Transmit+0x22>
 80018fe:	2302      	movs	r3, #2
 8001900:	e126      	b.n	8001b50 <HAL_SPI_Transmit+0x270>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800190a:	f7ff f8b7 	bl	8000a7c <HAL_GetTick>
 800190e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d002      	beq.n	8001926 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001920:	2302      	movs	r3, #2
 8001922:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001924:	e10b      	b.n	8001b3e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_SPI_Transmit+0x52>
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001936:	e102      	b.n	8001b3e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800197e:	d10f      	bne.n	80019a0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800199e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019aa:	2b40      	cmp	r3, #64	; 0x40
 80019ac:	d007      	beq.n	80019be <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019c6:	d14b      	bne.n	8001a60 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_SPI_Transmit+0xf6>
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d13e      	bne.n	8001a54 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	881a      	ldrh	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	1c9a      	adds	r2, r3, #2
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019fa:	e02b      	b.n	8001a54 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d112      	bne.n	8001a30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	1c9a      	adds	r2, r3, #2
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a2e:	e011      	b.n	8001a54 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a30:	f7ff f824 	bl	8000a7c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d803      	bhi.n	8001a48 <HAL_SPI_Transmit+0x168>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a46:	d102      	bne.n	8001a4e <HAL_SPI_Transmit+0x16e>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a52:	e074      	b.n	8001b3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ce      	bne.n	80019fc <HAL_SPI_Transmit+0x11c>
 8001a5e:	e04c      	b.n	8001afa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_SPI_Transmit+0x18e>
 8001a68:	8afb      	ldrh	r3, [r7, #22]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d140      	bne.n	8001af0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330c      	adds	r3, #12
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a94:	e02c      	b.n	8001af0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d113      	bne.n	8001acc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	330c      	adds	r3, #12
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001aca:	e011      	b.n	8001af0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001acc:	f7fe ffd6 	bl	8000a7c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d803      	bhi.n	8001ae4 <HAL_SPI_Transmit+0x204>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae2:	d102      	bne.n	8001aea <HAL_SPI_Transmit+0x20a>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001aee:	e026      	b.n	8001b3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1cd      	bne.n	8001a96 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fa62 	bl	8001fc8 <SPI_EndRxTxTransaction>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	77fb      	strb	r3, [r7, #31]
 8001b3a:	e000      	b.n	8001b3e <HAL_SPI_Transmit+0x25e>
  }

error:
 8001b3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b66:	2301      	movs	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x26>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e18a      	b.n	8001e94 <HAL_SPI_TransmitReceive+0x33c>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b86:	f7fe ff79 	bl	8000a7c <HAL_GetTick>
 8001b8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00f      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x70>
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bae:	d107      	bne.n	8001bc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <HAL_SPI_TransmitReceive+0x68>
 8001bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d003      	beq.n	8001bc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bc6:	e15b      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_SPI_TransmitReceive+0x82>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_SPI_TransmitReceive+0x82>
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001be0:	e14e      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d003      	beq.n	8001bf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d007      	beq.n	8001c4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c52:	d178      	bne.n	8001d46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_SPI_TransmitReceive+0x10a>
 8001c5c:	8b7b      	ldrh	r3, [r7, #26]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d166      	bne.n	8001d30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	1c9a      	adds	r2, r3, #2
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c86:	e053      	b.n	8001d30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d11b      	bne.n	8001cce <HAL_SPI_TransmitReceive+0x176>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d016      	beq.n	8001cce <HAL_SPI_TransmitReceive+0x176>
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d113      	bne.n	8001cce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	1c9a      	adds	r2, r3, #2
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d119      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x1b8>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d014      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf8:	1c9a      	adds	r2, r3, #2
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d10:	f7fe feb4 	bl	8000a7c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d807      	bhi.n	8001d30 <HAL_SPI_TransmitReceive+0x1d8>
 8001d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d003      	beq.n	8001d30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d2e:	e0a7      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1a6      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x130>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1a1      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x130>
 8001d44:	e07c      	b.n	8001e40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_SPI_TransmitReceive+0x1fc>
 8001d4e:	8b7b      	ldrh	r3, [r7, #26]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d16b      	bne.n	8001e2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d7a:	e057      	b.n	8001e2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d11c      	bne.n	8001dc4 <HAL_SPI_TransmitReceive+0x26c>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d017      	beq.n	8001dc4 <HAL_SPI_TransmitReceive+0x26c>
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d114      	bne.n	8001dc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d119      	bne.n	8001e06 <HAL_SPI_TransmitReceive+0x2ae>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d014      	beq.n	8001e06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e02:	2301      	movs	r3, #1
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e06:	f7fe fe39 	bl	8000a7c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d803      	bhi.n	8001e1e <HAL_SPI_TransmitReceive+0x2c6>
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d102      	bne.n	8001e24 <HAL_SPI_TransmitReceive+0x2cc>
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e2a:	e029      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1a2      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x224>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d19d      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f8bf 	bl	8001fc8 <SPI_EndRxTxTransaction>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e5c:	e010      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	e000      	b.n	8001e80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ec8:	f7fe fdd8 	bl	8000a7c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	1a9b      	subs	r3, r3, r2
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ed8:	f7fe fdd0 	bl	8000a7c <HAL_GetTick>
 8001edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	015b      	lsls	r3, r3, #5
 8001ee4:	0d1b      	lsrs	r3, r3, #20
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eee:	e054      	b.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d050      	beq.n	8001f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ef8:	f7fe fdc0 	bl	8000a7c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d902      	bls.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d13d      	bne.n	8001f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f26:	d111      	bne.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f30:	d004      	beq.n	8001f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d107      	bne.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f54:	d10f      	bne.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e017      	b.n	8001fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d19b      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff ff6a 	bl	8001eb8 <SPI_WaitFlagStateUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e000      	b.n	8001ffc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e041      	b.n	800209a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fbde 	bl	80007ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3304      	adds	r3, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 f98e 	bl	8002364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_TIM_PWM_Start+0x24>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e022      	b.n	800210e <HAL_TIM_PWM_Start+0x6a>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d109      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x3e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e015      	b.n	800210e <HAL_TIM_PWM_Start+0x6a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d109      	bne.n	80020fc <HAL_TIM_PWM_Start+0x58>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e008      	b.n	800210e <HAL_TIM_PWM_Start+0x6a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e05e      	b.n	80021d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <HAL_TIM_PWM_Start+0x82>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002124:	e013      	b.n	800214e <HAL_TIM_PWM_Start+0xaa>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PWM_Start+0x92>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002134:	e00b      	b.n	800214e <HAL_TIM_PWM_Start+0xaa>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d104      	bne.n	8002146 <HAL_TIM_PWM_Start+0xa2>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002144:	e003      	b.n	800214e <HAL_TIM_PWM_Start+0xaa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 faee 	bl	8002738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_TIM_PWM_Start+0x138>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d107      	bne.n	8002176 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_TIM_PWM_Start+0x138>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_TIM_PWM_Start+0xfa>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d009      	beq.n	800219e <HAL_TIM_PWM_Start+0xfa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_TIM_PWM_Start+0x13c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_PWM_Start+0xfa>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_TIM_PWM_Start+0x140>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d111      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d010      	beq.n	80021d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800

080021e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e0ac      	b.n	800235c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	f200 809f 	bhi.w	8002350 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	0800224d 	.word	0x0800224d
 800221c:	08002351 	.word	0x08002351
 8002220:	08002351 	.word	0x08002351
 8002224:	08002351 	.word	0x08002351
 8002228:	0800228d 	.word	0x0800228d
 800222c:	08002351 	.word	0x08002351
 8002230:	08002351 	.word	0x08002351
 8002234:	08002351 	.word	0x08002351
 8002238:	080022cf 	.word	0x080022cf
 800223c:	08002351 	.word	0x08002351
 8002240:	08002351 	.word	0x08002351
 8002244:	08002351 	.word	0x08002351
 8002248:	0800230f 	.word	0x0800230f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f8e8 	bl	8002428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6999      	ldr	r1, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	619a      	str	r2, [r3, #24]
      break;
 800228a:	e062      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f92e 	bl	80024f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6999      	ldr	r1, [r3, #24]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
      break;
 80022cc:	e041      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f977 	bl	80025c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0208 	orr.w	r2, r2, #8
 80022e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0204 	bic.w	r2, r2, #4
 80022f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
      break;
 800230c:	e021      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f9c1 	bl	800269c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69d9      	ldr	r1, [r3, #28]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	61da      	str	r2, [r3, #28]
      break;
 800234e:	e000      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a29      	ldr	r2, [pc, #164]	; (800241c <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00b      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a26      	ldr	r2, [pc, #152]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x30>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a25      	ldr	r2, [pc, #148]	; (8002424 <TIM_Base_SetConfig+0xc0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <TIM_Base_SetConfig+0xb8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <TIM_Base_SetConfig+0xc0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d108      	bne.n	80023d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <TIM_Base_SetConfig+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800

08002428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TIM_OC1_SetConfig+0xc8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0210 	bic.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0320 	bic.w	r3, r3, #32
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d113      	bne.n	80025a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800257e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10d      	bne.n	8002642 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800262c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	031b      	lsls	r3, r3, #12
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <TIM_OC4_SetConfig+0x98>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d109      	bne.n	8002710 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00

08002738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2201      	movs	r2, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	431a      	orrs	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002794:	2302      	movs	r3, #2
 8002796:	e046      	b.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a16      	ldr	r2, [pc, #88]	; (8002830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e4:	d009      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10c      	bne.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4313      	orrs	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002840:	4904      	ldr	r1, [pc, #16]	; (8002854 <MX_FATFS_Init+0x18>)
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <MX_FATFS_Init+0x1c>)
 8002844:	f004 f942 	bl	8006acc <FATFS_LinkDriver>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <MX_FATFS_Init+0x20>)
 800284e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000277c 	.word	0x2000277c
 8002858:	2000000c 	.word	0x2000000c
 800285c:	20002780 	.word	0x20002780

08002860 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002864:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	2110      	movs	r1, #16
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <SELECT+0x14>)
 800287a:	f7fe fb93 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40010800 	.word	0x40010800

08002888 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800288c:	2201      	movs	r2, #1
 800288e:	2110      	movs	r1, #16
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <DESELECT+0x14>)
 8002892:	f7fe fb87 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40010800 	.word	0x40010800

080028a0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80028aa:	bf00      	nop
 80028ac:	4808      	ldr	r0, [pc, #32]	; (80028d0 <SPI_TxByte+0x30>)
 80028ae:	f7ff faf5 	bl	8001e9c <HAL_SPI_GetState>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d1f9      	bne.n	80028ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80028b8:	1df9      	adds	r1, r7, #7
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	2201      	movs	r2, #1
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <SPI_TxByte+0x30>)
 80028c2:	f7ff f80d 	bl	80018e0 <HAL_SPI_Transmit>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20002718 	.word	0x20002718

080028d4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80028da:	23ff      	movs	r3, #255	; 0xff
 80028dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80028e2:	bf00      	nop
 80028e4:	4809      	ldr	r0, [pc, #36]	; (800290c <SPI_RxByte+0x38>)
 80028e6:	f7ff fad9 	bl	8001e9c <HAL_SPI_GetState>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d1f9      	bne.n	80028e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80028f0:	1dba      	adds	r2, r7, #6
 80028f2:	1df9      	adds	r1, r7, #7
 80028f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2301      	movs	r3, #1
 80028fc:	4803      	ldr	r0, [pc, #12]	; (800290c <SPI_RxByte+0x38>)
 80028fe:	f7ff f92b 	bl	8001b58 <HAL_SPI_TransmitReceive>
  
  return data;
 8002902:	79bb      	ldrb	r3, [r7, #6]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20002718 	.word	0x20002718

08002910 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002918:	f7ff ffdc 	bl	80028d4 <SPI_RxByte>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	701a      	strb	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <SD_ReadyWait+0x34>)
 8002934:	2232      	movs	r2, #50	; 0x32
 8002936:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002938:	f7ff ffcc 	bl	80028d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800293c:	f7ff ffca 	bl	80028d4 <SPI_RxByte>
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d004      	beq.n	8002954 <SD_ReadyWait+0x28>
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SD_ReadyWait+0x34>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f3      	bne.n	800293c <SD_ReadyWait+0x10>
  
  return res;
 8002954:	79fb      	ldrb	r3, [r7, #7]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20002772 	.word	0x20002772

08002964 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800296a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8002970:	f7ff ff8a 	bl	8002888 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e005      	b.n	8002986 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800297a:	20ff      	movs	r0, #255	; 0xff
 800297c:	f7ff ff90 	bl	80028a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3301      	adds	r3, #1
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b09      	cmp	r3, #9
 800298a:	ddf6      	ble.n	800297a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800298c:	f7ff ff70 	bl	8002870 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8002990:	2340      	movs	r3, #64	; 0x40
 8002992:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80029a4:	2395      	movs	r3, #149	; 0x95
 80029a6:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e009      	b.n	80029c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff72 	bl	80028a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	ddf2      	ble.n	80029ae <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80029c8:	e002      	b.n	80029d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80029d0:	f7ff ff80 	bl	80028d4 <SPI_RxByte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d002      	beq.n	80029e0 <SD_PowerOn+0x7c>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f4      	bne.n	80029ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80029e0:	f7ff ff52 	bl	8002888 <DESELECT>
  SPI_TxByte(0XFF);
 80029e4:	20ff      	movs	r0, #255	; 0xff
 80029e6:	f7ff ff5b 	bl	80028a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80029ea:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <SD_PowerOn+0x94>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000003e 	.word	0x2000003e

080029fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <SD_PowerOff+0x14>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000003e 	.word	0x2000003e

08002a14 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <SD_CheckPower+0x10>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	2000003e 	.word	0x2000003e

08002a28 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <SD_RxDataBlock+0x68>)
 8002a34:	220a      	movs	r2, #10
 8002a36:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002a38:	f7ff ff4c 	bl	80028d4 <SPI_RxByte>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d104      	bne.n	8002a50 <SD_RxDataBlock+0x28>
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <SD_RxDataBlock+0x68>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f3      	bne.n	8002a38 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2bfe      	cmp	r3, #254	; 0xfe
 8002a54:	d001      	beq.n	8002a5a <SD_RxDataBlock+0x32>
    return FALSE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e016      	b.n	8002a88 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff55 	bl	8002910 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff4f 	bl	8002910 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3b02      	subs	r3, #2
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1ed      	bne.n	8002a5a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8002a7e:	f7ff ff29 	bl	80028d4 <SPI_RxByte>
  SPI_RxByte();
 8002a82:	f7ff ff27 	bl	80028d4 <SPI_RxByte>
  
  return TRUE;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20002774 	.word	0x20002774

08002a94 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002aa4:	f7ff ff42 	bl	800292c <SD_ReadyWait>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2bff      	cmp	r3, #255	; 0xff
 8002aac:	d001      	beq.n	8002ab2 <SD_TxDataBlock+0x1e>
    return FALSE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e040      	b.n	8002b34 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fef3 	bl	80028a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	2bfd      	cmp	r3, #253	; 0xfd
 8002abe:	d031      	beq.n	8002b24 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fee7 	bl	80028a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fee0 	bl	80028a0 <SPI_TxByte>
    } while (--wc);
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	73bb      	strb	r3, [r7, #14]
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1eb      	bne.n	8002ac4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8002aec:	f7ff fef2 	bl	80028d4 <SPI_RxByte>
    SPI_RxByte();
 8002af0:	f7ff fef0 	bl	80028d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8002af4:	e00b      	b.n	8002b0e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8002af6:	f7ff feed 	bl	80028d4 <SPI_RxByte>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d006      	beq.n	8002b16 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8002b08:	7b7b      	ldrb	r3, [r7, #13]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d9f0      	bls.n	8002af6 <SD_TxDataBlock+0x62>
 8002b14:	e000      	b.n	8002b18 <SD_TxDataBlock+0x84>
        break;
 8002b16:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8002b18:	bf00      	nop
 8002b1a:	f7ff fedb 	bl	80028d4 <SPI_RxByte>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0fa      	beq.n	8002b1a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d101      	bne.n	8002b32 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002b48:	f7ff fef0 	bl	800292c <SD_ReadyWait>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d001      	beq.n	8002b56 <SD_SendCmd+0x1a>
    return 0xFF;
 8002b52:	23ff      	movs	r3, #255	; 0xff
 8002b54:	e040      	b.n	8002bd8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fea1 	bl	80028a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	0e1b      	lsrs	r3, r3, #24
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fe9b 	bl	80028a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fe95 	bl	80028a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fe8f 	bl	80028a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe8a 	bl	80028a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d101      	bne.n	8002b9a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002b96:	2395      	movs	r3, #149	; 0x95
 8002b98:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b48      	cmp	r3, #72	; 0x48
 8002b9e:	d101      	bne.n	8002ba4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002ba0:	2387      	movs	r3, #135	; 0x87
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe7a 	bl	80028a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b4c      	cmp	r3, #76	; 0x4c
 8002bb0:	d101      	bne.n	8002bb6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002bb2:	f7ff fe8f 	bl	80028d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002bb6:	230a      	movs	r3, #10
 8002bb8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002bba:	f7ff fe8b 	bl	80028d4 <SPI_RxByte>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002bc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da05      	bge.n	8002bd6 <SD_SendCmd+0x9a>
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	73bb      	strb	r3, [r7, #14]
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f1      	bne.n	8002bba <SD_SendCmd+0x7e>
  
  return res;
 8002bd6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d5      	b.n	8002da0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <SD_disk_initialize+0x1c8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <SD_disk_initialize+0x2a>
    return Stat;        
 8002c02:	4b69      	ldr	r3, [pc, #420]	; (8002da8 <SD_disk_initialize+0x1c8>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	e0ca      	b.n	8002da0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002c0a:	f7ff feab 	bl	8002964 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002c0e:	f7ff fe2f 	bl	8002870 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002c16:	2100      	movs	r1, #0
 8002c18:	2040      	movs	r0, #64	; 0x40
 8002c1a:	f7ff ff8f 	bl	8002b3c <SD_SendCmd>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 80a5 	bne.w	8002d70 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <SD_disk_initialize+0x1cc>)
 8002c28:	2264      	movs	r2, #100	; 0x64
 8002c2a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c30:	2048      	movs	r0, #72	; 0x48
 8002c32:	f7ff ff83 	bl	8002b3c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d158      	bne.n	8002cee <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e00c      	b.n	8002c5c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002c42:	7bfc      	ldrb	r4, [r7, #15]
 8002c44:	f7ff fe46 	bl	80028d4 <SPI_RxByte>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4423      	add	r3, r4
 8002c52:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d9ef      	bls.n	8002c42 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002c62:	7abb      	ldrb	r3, [r7, #10]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 8083 	bne.w	8002d70 <SD_disk_initialize+0x190>
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
 8002c6c:	2baa      	cmp	r3, #170	; 0xaa
 8002c6e:	d17f      	bne.n	8002d70 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002c70:	2100      	movs	r1, #0
 8002c72:	2077      	movs	r0, #119	; 0x77
 8002c74:	f7ff ff62 	bl	8002b3c <SD_SendCmd>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d807      	bhi.n	8002c8e <SD_disk_initialize+0xae>
 8002c7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c82:	2069      	movs	r0, #105	; 0x69
 8002c84:	f7ff ff5a 	bl	8002b3c <SD_SendCmd>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <SD_disk_initialize+0x1cc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1eb      	bne.n	8002c70 <SD_disk_initialize+0x90>
 8002c98:	e000      	b.n	8002c9c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002c9a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <SD_disk_initialize+0x1cc>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d064      	beq.n	8002d70 <SD_disk_initialize+0x190>
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	207a      	movs	r0, #122	; 0x7a
 8002caa:	f7ff ff47 	bl	8002b3c <SD_SendCmd>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d15d      	bne.n	8002d70 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e00c      	b.n	8002cd4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002cba:	7bfc      	ldrb	r4, [r7, #15]
 8002cbc:	f7ff fe0a 	bl	80028d4 <SPI_RxByte>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f107 0310 	add.w	r3, r7, #16
 8002cc8:	4423      	add	r3, r4
 8002cca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d9ef      	bls.n	8002cba <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002cda:	7a3b      	ldrb	r3, [r7, #8]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <SD_disk_initialize+0x108>
 8002ce4:	2306      	movs	r3, #6
 8002ce6:	e000      	b.n	8002cea <SD_disk_initialize+0x10a>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	73bb      	strb	r3, [r7, #14]
 8002cec:	e040      	b.n	8002d70 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2077      	movs	r0, #119	; 0x77
 8002cf2:	f7ff ff23 	bl	8002b3c <SD_SendCmd>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d808      	bhi.n	8002d0e <SD_disk_initialize+0x12e>
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2069      	movs	r0, #105	; 0x69
 8002d00:	f7ff ff1c 	bl	8002b3c <SD_SendCmd>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d801      	bhi.n	8002d0e <SD_disk_initialize+0x12e>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e000      	b.n	8002d10 <SD_disk_initialize+0x130>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002d12:	7bbb      	ldrb	r3, [r7, #14]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d10e      	bne.n	8002d36 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2077      	movs	r0, #119	; 0x77
 8002d1c:	f7ff ff0e 	bl	8002b3c <SD_SendCmd>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d80e      	bhi.n	8002d44 <SD_disk_initialize+0x164>
 8002d26:	2100      	movs	r1, #0
 8002d28:	2069      	movs	r0, #105	; 0x69
 8002d2a:	f7ff ff07 	bl	8002b3c <SD_SendCmd>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002d34:	e00d      	b.n	8002d52 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002d36:	2100      	movs	r1, #0
 8002d38:	2041      	movs	r0, #65	; 0x41
 8002d3a:	f7ff feff 	bl	8002b3c <SD_SendCmd>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <SD_disk_initialize+0x1cc>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e1      	bne.n	8002d12 <SD_disk_initialize+0x132>
 8002d4e:	e000      	b.n	8002d52 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002d50:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <SD_disk_initialize+0x1cc>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <SD_disk_initialize+0x18c>
 8002d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d60:	2050      	movs	r0, #80	; 0x50
 8002d62:	f7ff feeb 	bl	8002b3c <SD_SendCmd>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002d70:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <SD_disk_initialize+0x1d0>)
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002d76:	f7ff fd87 	bl	8002888 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002d7a:	f7ff fdab 	bl	80028d4 <SPI_RxByte>
  
  if (type) 
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <SD_disk_initialize+0x1c8>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SD_disk_initialize+0x1c8>)
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e001      	b.n	8002d9a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002d96:	f7ff fe31 	bl	80029fc <SD_PowerOff>
  }
  
  return Stat;
 8002d9a:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <SD_disk_initialize+0x1c8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd90      	pop	{r4, r7, pc}
 8002da8:	20000009 	.word	0x20000009
 8002dac:	20002774 	.word	0x20002774
 8002db0:	2000003d 	.word	0x2000003d

08002db4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e002      	b.n	8002dce <SD_disk_status+0x1a>
  
  return Stat;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <SD_disk_status+0x24>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20000009 	.word	0x20000009

08002ddc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <SD_disk_read+0x1c>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <SD_disk_read+0x20>
    return RES_PARERR;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e051      	b.n	8002ea0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <SD_disk_read+0xcc>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e048      	b.n	8002ea0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002e0e:	4b27      	ldr	r3, [pc, #156]	; (8002eac <SD_disk_read+0xd0>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	025b      	lsls	r3, r3, #9
 8002e1e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002e20:	f7ff fd26 	bl	8002870 <SELECT>
  
  if (count == 1) 
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d111      	bne.n	8002e4e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	2051      	movs	r0, #81	; 0x51
 8002e2e:	f7ff fe85 	bl	8002b3c <SD_SendCmd>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d129      	bne.n	8002e8c <SD_disk_read+0xb0>
 8002e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	f7ff fdf3 	bl	8002a28 <SD_RxDataBlock>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d021      	beq.n	8002e8c <SD_disk_read+0xb0>
      count = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	e01e      	b.n	8002e8c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	2052      	movs	r0, #82	; 0x52
 8002e52:	f7ff fe73 	bl	8002b3c <SD_SendCmd>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d117      	bne.n	8002e8c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e60:	68b8      	ldr	r0, [r7, #8]
 8002e62:	f7ff fde1 	bl	8002a28 <SD_RxDataBlock>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e72:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ed      	bne.n	8002e5c <SD_disk_read+0x80>
 8002e80:	e000      	b.n	8002e84 <SD_disk_read+0xa8>
          break;
 8002e82:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002e84:	2100      	movs	r1, #0
 8002e86:	204c      	movs	r0, #76	; 0x4c
 8002e88:	f7ff fe58 	bl	8002b3c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002e8c:	f7ff fcfc 	bl	8002888 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002e90:	f7ff fd20 	bl	80028d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000009 	.word	0x20000009
 8002eac:	2000003d 	.word	0x2000003d

08002eb0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <SD_disk_write+0x1c>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <SD_disk_write+0x20>
    return RES_PARERR;
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e06b      	b.n	8002fa8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <SD_disk_write+0x100>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e062      	b.n	8002fa8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <SD_disk_write+0x100>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e059      	b.n	8002fa8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002ef4:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <SD_disk_write+0x104>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002f06:	f7ff fcb3 	bl	8002870 <SELECT>
  
  if (count == 1) 
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d110      	bne.n	8002f32 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	2058      	movs	r0, #88	; 0x58
 8002f14:	f7ff fe12 	bl	8002b3c <SD_SendCmd>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d13a      	bne.n	8002f94 <SD_disk_write+0xe4>
 8002f1e:	21fe      	movs	r1, #254	; 0xfe
 8002f20:	68b8      	ldr	r0, [r7, #8]
 8002f22:	f7ff fdb7 	bl	8002a94 <SD_TxDataBlock>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d033      	beq.n	8002f94 <SD_disk_write+0xe4>
      count = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	e030      	b.n	8002f94 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <SD_disk_write+0x104>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2077      	movs	r0, #119	; 0x77
 8002f42:	f7ff fdfb 	bl	8002b3c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002f46:	6839      	ldr	r1, [r7, #0]
 8002f48:	2057      	movs	r0, #87	; 0x57
 8002f4a:	f7ff fdf7 	bl	8002b3c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	2059      	movs	r0, #89	; 0x59
 8002f52:	f7ff fdf3 	bl	8002b3c <SD_SendCmd>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11b      	bne.n	8002f94 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002f5c:	21fc      	movs	r1, #252	; 0xfc
 8002f5e:	68b8      	ldr	r0, [r7, #8]
 8002f60:	f7ff fd98 	bl	8002a94 <SD_TxDataBlock>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f70:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ee      	bne.n	8002f5c <SD_disk_write+0xac>
 8002f7e:	e000      	b.n	8002f82 <SD_disk_write+0xd2>
          break;
 8002f80:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002f82:	21fd      	movs	r1, #253	; 0xfd
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7ff fd85 	bl	8002a94 <SD_TxDataBlock>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002f94:	f7ff fc78 	bl	8002888 <DESELECT>
  SPI_RxByte();
 8002f98:	f7ff fc9c 	bl	80028d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20000009 	.word	0x20000009
 8002fb4:	2000003d 	.word	0x2000003d

08002fb8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	603a      	str	r2, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e117      	b.n	8003206 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d126      	bne.n	8003030 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d00e      	beq.n	8003008 <SD_disk_ioctl+0x50>
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d012      	beq.n	8003014 <SD_disk_ioctl+0x5c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11a      	bne.n	8003028 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8002ff2:	f7ff fd0f 	bl	8002a14 <SD_CheckPower>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8002ffc:	f7ff fcfe 	bl	80029fc <SD_PowerOff>
      res = RES_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003006:	e0fc      	b.n	8003202 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8003008:	f7ff fcac 	bl	8002964 <SD_PowerOn>
      res = RES_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003012:	e0f6      	b.n	8003202 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	1c5c      	adds	r4, r3, #1
 8003018:	f7ff fcfc 	bl	8002a14 <SD_CheckPower>
 800301c:	4603      	mov	r3, r0
 800301e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003026:	e0ec      	b.n	8003202 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800302e:	e0e8      	b.n	8003202 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8003030:	4b77      	ldr	r3, [pc, #476]	; (8003210 <SD_disk_ioctl+0x258>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800303e:	2303      	movs	r3, #3
 8003040:	e0e1      	b.n	8003206 <SD_disk_ioctl+0x24e>
    
    SELECT();
 8003042:	f7ff fc15 	bl	8002870 <SELECT>
    
    switch (ctrl) 
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	2b0d      	cmp	r3, #13
 800304a:	f200 80cb 	bhi.w	80031e4 <SD_disk_ioctl+0x22c>
 800304e:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <SD_disk_ioctl+0x9c>)
 8003050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003054:	0800314f 	.word	0x0800314f
 8003058:	0800308d 	.word	0x0800308d
 800305c:	0800313f 	.word	0x0800313f
 8003060:	080031e5 	.word	0x080031e5
 8003064:	080031e5 	.word	0x080031e5
 8003068:	080031e5 	.word	0x080031e5
 800306c:	080031e5 	.word	0x080031e5
 8003070:	080031e5 	.word	0x080031e5
 8003074:	080031e5 	.word	0x080031e5
 8003078:	080031e5 	.word	0x080031e5
 800307c:	080031e5 	.word	0x080031e5
 8003080:	08003161 	.word	0x08003161
 8003084:	08003185 	.word	0x08003185
 8003088:	080031a9 	.word	0x080031a9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800308c:	2100      	movs	r1, #0
 800308e:	2049      	movs	r0, #73	; 0x49
 8003090:	f7ff fd54 	bl	8002b3c <SD_SendCmd>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80a8 	bne.w	80031ec <SD_disk_ioctl+0x234>
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2110      	movs	r1, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fcc0 	bl	8002a28 <SD_RxDataBlock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 809e 	beq.w	80031ec <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80030b0:	7b3b      	ldrb	r3, [r7, #12]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10e      	bne.n	80030d8 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80030ba:	7d7b      	ldrb	r3, [r7, #21]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	7d3b      	ldrb	r3, [r7, #20]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	029a      	lsls	r2, r3, #10
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e02e      	b.n	8003136 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80030d8:	7c7b      	ldrb	r3, [r7, #17]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	7dbb      	ldrb	r3, [r7, #22]
 80030e2:	09db      	lsrs	r3, r3, #7
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	7d7b      	ldrb	r3, [r7, #21]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0306 	and.w	r3, r3, #6
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3302      	adds	r3, #2
 80030fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003100:	7d3b      	ldrb	r3, [r7, #20]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	b2db      	uxtb	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	b29b      	uxth	r3, r3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	b29b      	uxth	r3, r3
 8003110:	4413      	add	r3, r2
 8003112:	b29a      	uxth	r2, r3
 8003114:	7cbb      	ldrb	r3, [r7, #18]
 8003116:	029b      	lsls	r3, r3, #10
 8003118:	b29b      	uxth	r3, r3
 800311a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800311e:	b29b      	uxth	r3, r3
 8003120:	4413      	add	r3, r2
 8003122:	b29b      	uxth	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003128:	8bfa      	ldrh	r2, [r7, #30]
 800312a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800312e:	3b09      	subs	r3, #9
 8003130:	409a      	lsls	r2, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800313c:	e056      	b.n	80031ec <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003144:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800314c:	e055      	b.n	80031fa <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800314e:	f7ff fbed 	bl	800292c <SD_ReadyWait>
 8003152:	4603      	mov	r3, r0
 8003154:	2bff      	cmp	r3, #255	; 0xff
 8003156:	d14b      	bne.n	80031f0 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800315e:	e047      	b.n	80031f0 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003160:	2100      	movs	r1, #0
 8003162:	2049      	movs	r0, #73	; 0x49
 8003164:	f7ff fcea 	bl	8002b3c <SD_SendCmd>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d142      	bne.n	80031f4 <SD_disk_ioctl+0x23c>
 800316e:	2110      	movs	r1, #16
 8003170:	6a38      	ldr	r0, [r7, #32]
 8003172:	f7ff fc59 	bl	8002a28 <SD_RxDataBlock>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d03b      	beq.n	80031f4 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003182:	e037      	b.n	80031f4 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003184:	2100      	movs	r1, #0
 8003186:	204a      	movs	r0, #74	; 0x4a
 8003188:	f7ff fcd8 	bl	8002b3c <SD_SendCmd>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d132      	bne.n	80031f8 <SD_disk_ioctl+0x240>
 8003192:	2110      	movs	r1, #16
 8003194:	6a38      	ldr	r0, [r7, #32]
 8003196:	f7ff fc47 	bl	8002a28 <SD_RxDataBlock>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02b      	beq.n	80031f8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80031a6:	e027      	b.n	80031f8 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80031a8:	2100      	movs	r1, #0
 80031aa:	207a      	movs	r0, #122	; 0x7a
 80031ac:	f7ff fcc6 	bl	8002b3c <SD_SendCmd>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031bc:	e00b      	b.n	80031d6 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80031be:	6a3c      	ldr	r4, [r7, #32]
 80031c0:	1c63      	adds	r3, r4, #1
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	f7ff fb86 	bl	80028d4 <SPI_RxByte>
 80031c8:	4603      	mov	r3, r0
 80031ca:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80031cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031d0:	3301      	adds	r3, #1
 80031d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d9ef      	bls.n	80031be <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80031e4:	2304      	movs	r3, #4
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ea:	e006      	b.n	80031fa <SD_disk_ioctl+0x242>
      break;
 80031ec:	bf00      	nop
 80031ee:	e004      	b.n	80031fa <SD_disk_ioctl+0x242>
      break;
 80031f0:	bf00      	nop
 80031f2:	e002      	b.n	80031fa <SD_disk_ioctl+0x242>
      break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <SD_disk_ioctl+0x242>
      break;
 80031f8:	bf00      	nop
    }
    
    DESELECT();
 80031fa:	f7ff fb45 	bl	8002888 <DESELECT>
    SPI_RxByte();
 80031fe:	f7ff fb69 	bl	80028d4 <SPI_RxByte>
  }
  
  return res;
 8003202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003206:	4618      	mov	r0, r3
 8003208:	372c      	adds	r7, #44	; 0x2c
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}
 800320e:	bf00      	nop
 8003210:	20000009 	.word	0x20000009

08003214 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fcdd 	bl	8002be0 <SD_disk_initialize>
 8003226:	4603      	mov	r3, r0
 8003228:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fdb8 	bl	8002db4 <SD_disk_status>
 8003244:	4603      	mov	r3, r0
 8003246:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003260:	7bf8      	ldrb	r0, [r7, #15]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	f7ff fdb8 	bl	8002ddc <SD_disk_read>
 800326c:	4603      	mov	r3, r0
 800326e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003288:	7bf8      	ldrb	r0, [r7, #15]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	f7ff fe0e 	bl	8002eb0 <SD_disk_write>
 8003294:	4603      	mov	r3, r0
 8003296:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	603a      	str	r2, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
 80032ac:	460b      	mov	r3, r1
 80032ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	79b9      	ldrb	r1, [r7, #6]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fe7e 	bl	8002fb8 <SD_disk_ioctl>
 80032bc:	4603      	mov	r3, r0
 80032be:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <disk_status+0x30>)
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	4905      	ldr	r1, [pc, #20]	; (80032f8 <disk_status+0x30>)
 80032e2:	440a      	add	r2, r1
 80032e4:	7a12      	ldrb	r2, [r2, #8]
 80032e6:	4610      	mov	r0, r2
 80032e8:	4798      	blx	r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000260 	.word	0x20000260

080032fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <disk_initialize+0x48>)
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d111      	bne.n	8003338 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <disk_initialize+0x48>)
 8003318:	2101      	movs	r1, #1
 800331a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <disk_initialize+0x48>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	4906      	ldr	r1, [pc, #24]	; (8003344 <disk_initialize+0x48>)
 800332c:	440a      	add	r2, r1
 800332e:	7a12      	ldrb	r2, [r2, #8]
 8003330:	4610      	mov	r0, r2
 8003332:	4798      	blx	r3
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000260 	.word	0x20000260

08003348 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <disk_read+0x3c>)
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	689c      	ldr	r4, [r3, #8]
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <disk_read+0x3c>)
 8003368:	4413      	add	r3, r2
 800336a:	7a18      	ldrb	r0, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	47a0      	blx	r4
 8003374:	4603      	mov	r3, r0
 8003376:	75fb      	strb	r3, [r7, #23]
  return res;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
}
 800337a:	4618      	mov	r0, r3
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	bf00      	nop
 8003384:	20000260 	.word	0x20000260

08003388 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <disk_write+0x3c>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	68dc      	ldr	r4, [r3, #12]
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <disk_write+0x3c>)
 80033a8:	4413      	add	r3, r2
 80033aa:	7a18      	ldrb	r0, [r3, #8]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	47a0      	blx	r4
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000260 	.word	0x20000260

080033c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	603a      	str	r2, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	460b      	mov	r3, r1
 80033d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <disk_ioctl+0x38>)
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	79fa      	ldrb	r2, [r7, #7]
 80033e6:	4906      	ldr	r1, [pc, #24]	; (8003400 <disk_ioctl+0x38>)
 80033e8:	440a      	add	r2, r1
 80033ea:	7a10      	ldrb	r0, [r2, #8]
 80033ec:	79b9      	ldrb	r1, [r7, #6]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4798      	blx	r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000260 	.word	0x20000260

08003404 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003418:	e007      	b.n	800342a <mem_cpy+0x26>
		*d++ = *s++;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	1c53      	adds	r3, r2, #1
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	6179      	str	r1, [r7, #20]
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f2      	bne.n	800341a <mem_cpy+0x16>
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr

0800343e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800343e:	b480      	push	{r7}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800344e:	e005      	b.n	800345c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	617a      	str	r2, [r7, #20]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f4      	bne.n	8003450 <mem_set+0x12>
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003488:	bf00      	nop
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <mem_cmp+0x40>
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	61fa      	str	r2, [r7, #28]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4619      	mov	r1, r3
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	61ba      	str	r2, [r7, #24]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	1acb      	subs	r3, r1, r3
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ec      	beq.n	800348a <mem_cmp+0x1a>
	return r;
 80034b0:	697b      	ldr	r3, [r7, #20]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80034c6:	e002      	b.n	80034ce <chk_chr+0x12>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <chk_chr+0x26>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4293      	cmp	r3, r2
 80034e0:	d1f2      	bne.n	80034c8 <chk_chr+0xc>
	return *str;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	781b      	ldrb	r3, [r3, #0]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	e03d      	b.n	8003580 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003504:	4932      	ldr	r1, [pc, #200]	; (80035d0 <chk_lock+0xe0>)
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02e      	beq.n	8003576 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003518:	492d      	ldr	r1, [pc, #180]	; (80035d0 <chk_lock+0xe0>)
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d122      	bne.n	800357a <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003534:	4926      	ldr	r1, [pc, #152]	; (80035d0 <chk_lock+0xe0>)
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3304      	adds	r3, #4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354c:	3308      	adds	r3, #8
 800354e:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003550:	429a      	cmp	r2, r3
 8003552:	d112      	bne.n	800357a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003554:	491e      	ldr	r1, [pc, #120]	; (80035d0 <chk_lock+0xe0>)
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3308      	adds	r3, #8
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356c:	3306      	adds	r3, #6
 800356e:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003570:	429a      	cmp	r2, r3
 8003572:	d102      	bne.n	800357a <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003574:	e007      	b.n	8003586 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d9be      	bls.n	8003504 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d109      	bne.n	80035a0 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <chk_lock+0xa8>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d101      	bne.n	800359c <chk_lock+0xac>
 8003598:	2300      	movs	r3, #0
 800359a:	e013      	b.n	80035c4 <chk_lock+0xd4>
 800359c:	2312      	movs	r3, #18
 800359e:	e011      	b.n	80035c4 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <chk_lock+0xce>
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <chk_lock+0xe0>)
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	330a      	adds	r3, #10
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035bc:	d101      	bne.n	80035c2 <chk_lock+0xd2>
 80035be:	2310      	movs	r3, #16
 80035c0:	e000      	b.n	80035c4 <chk_lock+0xd4>
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000048 	.word	0x20000048

080035d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e002      	b.n	80035e6 <enq_lock+0x12>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d809      	bhi.n	8003600 <enq_lock+0x2c>
 80035ec:	490a      	ldr	r1, [pc, #40]	; (8003618 <enq_lock+0x44>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ef      	bne.n	80035e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000048 	.word	0x20000048

0800361c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e030      	b.n	800368e <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 800362c:	495a      	ldr	r1, [pc, #360]	; (8003798 <inc_lock+0x17c>)
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d11f      	bne.n	8003688 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003648:	4953      	ldr	r1, [pc, #332]	; (8003798 <inc_lock+0x17c>)
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3304      	adds	r3, #4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003660:	3308      	adds	r3, #8
 8003662:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003664:	429a      	cmp	r2, r3
 8003666:	d10f      	bne.n	8003688 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003668:	494b      	ldr	r1, [pc, #300]	; (8003798 <inc_lock+0x17c>)
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3308      	adds	r3, #8
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003680:	3306      	adds	r3, #6
 8003682:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003684:	429a      	cmp	r2, r3
 8003686:	d006      	beq.n	8003696 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d9cb      	bls.n	800362c <inc_lock+0x10>
 8003694:	e000      	b.n	8003698 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003696:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d14a      	bne.n	8003734 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e002      	b.n	80036aa <inc_lock+0x8e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d809      	bhi.n	80036c4 <inc_lock+0xa8>
 80036b0:	4939      	ldr	r1, [pc, #228]	; (8003798 <inc_lock+0x17c>)
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d101      	bne.n	80036ce <inc_lock+0xb2>
 80036ca:	2300      	movs	r3, #0
 80036cc:	e05f      	b.n	800378e <inc_lock+0x172>
		Files[i].fs = dp->fs;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	4830      	ldr	r0, [pc, #192]	; (8003798 <inc_lock+0x17c>)
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4403      	add	r3, r0
 80036e4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	3308      	adds	r3, #8
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	4829      	ldr	r0, [pc, #164]	; (8003798 <inc_lock+0x17c>)
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4403      	add	r3, r0
 80036fe:	3304      	adds	r3, #4
 8003700:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	3306      	adds	r3, #6
 800370a:	8818      	ldrh	r0, [r3, #0]
 800370c:	4922      	ldr	r1, [pc, #136]	; (8003798 <inc_lock+0x17c>)
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3308      	adds	r3, #8
 800371c:	4602      	mov	r2, r0
 800371e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003720:	491d      	ldr	r1, [pc, #116]	; (8003798 <inc_lock+0x17c>)
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	330a      	adds	r3, #10
 8003730:	2200      	movs	r2, #0
 8003732:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <inc_lock+0x138>
 800373a:	4917      	ldr	r1, [pc, #92]	; (8003798 <inc_lock+0x17c>)
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	330a      	adds	r3, #10
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <inc_lock+0x138>
 8003750:	2300      	movs	r3, #0
 8003752:	e01c      	b.n	800378e <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <inc_lock+0x156>
 800375a:	490f      	ldr	r1, [pc, #60]	; (8003798 <inc_lock+0x17c>)
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	330a      	adds	r3, #10
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	b299      	uxth	r1, r3
 8003770:	e001      	b.n	8003776 <inc_lock+0x15a>
 8003772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003776:	4808      	ldr	r0, [pc, #32]	; (8003798 <inc_lock+0x17c>)
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	330a      	adds	r3, #10
 8003786:	460a      	mov	r2, r1
 8003788:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3301      	adds	r3, #1
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	20000048 	.word	0x20000048

0800379c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d82e      	bhi.n	800380e <dec_lock+0x72>
		n = Files[i].ctr;
 80037b0:	491b      	ldr	r1, [pc, #108]	; (8003820 <dec_lock+0x84>)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	330a      	adds	r3, #10
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80037c4:	89fb      	ldrh	r3, [r7, #14]
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	d101      	bne.n	80037d0 <dec_lock+0x34>
 80037cc:	2300      	movs	r3, #0
 80037ce:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80037d0:	89fb      	ldrh	r3, [r7, #14]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <dec_lock+0x40>
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	3b01      	subs	r3, #1
 80037da:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80037dc:	4910      	ldr	r1, [pc, #64]	; (8003820 <dec_lock+0x84>)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	330a      	adds	r3, #10
 80037ec:	89fa      	ldrh	r2, [r7, #14]
 80037ee:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80037f0:	89fb      	ldrh	r3, [r7, #14]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <dec_lock+0x6c>
 80037f6:	490a      	ldr	r1, [pc, #40]	; (8003820 <dec_lock+0x84>)
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	737b      	strb	r3, [r7, #13]
 800380c:	e001      	b.n	8003812 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800380e:	2302      	movs	r3, #2
 8003810:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003812:	7b7b      	ldrb	r3, [r7, #13]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000048 	.word	0x20000048

08003824 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e016      	b.n	8003860 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003832:	490f      	ldr	r1, [pc, #60]	; (8003870 <clear_lock+0x4c>)
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	d108      	bne.n	800385a <clear_lock+0x36>
 8003848:	4909      	ldr	r1, [pc, #36]	; (8003870 <clear_lock+0x4c>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d9e5      	bls.n	8003832 <clear_lock+0xe>
	}
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	20000048 	.word	0x20000048

08003874 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	3304      	adds	r3, #4
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d047      	beq.n	800391e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003894:	330c      	adds	r3, #12
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a0:	3301      	adds	r3, #1
 80038a2:	7818      	ldrb	r0, [r3, #0]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	2301      	movs	r3, #1
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	f7ff fd6d 	bl	8003388 <disk_write>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <sync_window+0x46>
			res = FR_DISK_ERR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e031      	b.n	800391e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c0:	3304      	adds	r3, #4
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	1ad2      	subs	r2, r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	3318      	adds	r3, #24
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d21e      	bcs.n	800391e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e6:	3303      	adds	r3, #3
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	e014      	b.n	8003918 <sync_window+0xa4>
					wsect += fs->fsize;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f4:	3318      	adds	r3, #24
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003904:	3301      	adds	r3, #1
 8003906:	7818      	ldrb	r0, [r3, #0]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	2301      	movs	r3, #1
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	f7ff fd3b 	bl	8003388 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	3b01      	subs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d8e7      	bhi.n	80038ee <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800393c:	330c      	adds	r3, #12
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d01f      	beq.n	8003986 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff94 	bl	8003874 <sync_window>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d117      	bne.n	8003986 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800395c:	3301      	adds	r3, #1
 800395e:	7818      	ldrb	r0, [r3, #0]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	2301      	movs	r3, #1
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	f7ff fcef 	bl	8003348 <disk_read>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003980:	330c      	adds	r3, #12
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff6b 	bl	8003874 <sync_window>
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 80bd 	bne.w	8003b24 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	f040 80a7 	bne.w	8003b06 <sync_fs+0x176>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039be:	3305      	adds	r3, #5
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f040 809f 	bne.w	8003b06 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d0:	330a      	adds	r3, #10
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	2100      	movs	r1, #0
 80039d8:	f7ff fd31 	bl	800343e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2255      	movs	r2, #85	; 0x55
 80039e0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	22aa      	movs	r2, #170	; 0xaa
 80039e8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2252      	movs	r2, #82	; 0x52
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2252      	movs	r2, #82	; 0x52
 80039f6:	705a      	strb	r2, [r3, #1]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2261      	movs	r2, #97	; 0x61
 80039fc:	709a      	strb	r2, [r3, #2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2241      	movs	r2, #65	; 0x41
 8003a02:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2272      	movs	r2, #114	; 0x72
 8003a08:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2272      	movs	r2, #114	; 0x72
 8003a10:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2241      	movs	r2, #65	; 0x41
 8003a18:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2261      	movs	r2, #97	; 0x61
 8003a20:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a54:	3310      	adds	r3, #16
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	3310      	adds	r3, #16
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e1b      	lsrs	r3, r3, #24
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	330c      	adds	r3, #12
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aba:	330c      	adds	r3, #12
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	0e1b      	lsrs	r3, r3, #24
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	331c      	adds	r3, #28
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ada:	330c      	adds	r3, #12
 8003adc:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	7818      	ldrb	r0, [r3, #0]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003af0:	330c      	adds	r3, #12
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	2301      	movs	r3, #1
 8003af6:	f7ff fc47 	bl	8003388 <disk_write>
			fs->fsi_flag = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	3305      	adds	r3, #5
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fc57 	bl	80033c8 <disk_ioctl>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <sync_fs+0x194>
			res = FR_DISK_ERR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3b02      	subs	r3, #2
 8003b3c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b44:	3314      	adds	r3, #20
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b02      	subs	r3, #2
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d301      	bcc.n	8003b54 <clust2sect+0x26>
 8003b50:	2300      	movs	r3, #0
 8003b52:	e00e      	b.n	8003b72 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	fb03 f202 	mul.w	r2, r3, r2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4413      	add	r3, r2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d907      	bls.n	8003b9c <get_fat+0x20>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b92:	3314      	adds	r3, #20
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e0e9      	b.n	8003d76 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d068      	beq.n	8003c86 <get_fat+0x10a>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	f000 8099 	beq.w	8003cec <get_fat+0x170>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	f040 80d1 	bne.w	8003d62 <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bdc:	330a      	adds	r3, #10
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be8:	4413      	add	r3, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fe9b 	bl	8003928 <move_window>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 80b7 	bne.w	8003d68 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c06:	320a      	adds	r2, #10
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c0e:	fb02 f201 	mul.w	r2, r2, r1
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	330a      	adds	r3, #10
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c34:	4413      	add	r3, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff fe75 	bl	8003928 <move_window>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 8093 	bne.w	8003d6c <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4c:	330a      	adds	r3, #10
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c58:	fb02 f201 	mul.w	r2, r2, r1
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <get_fat+0x100>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	e002      	b.n	8003c82 <get_fat+0x106>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c82:	617b      	str	r3, [r7, #20]
			break;
 8003c84:	e077      	b.n	8003d76 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	330a      	adds	r3, #10
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fe3d 	bl	8003928 <move_window>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d15d      	bne.n	8003d70 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	005a      	lsls	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbe:	330a      	adds	r3, #10
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cc6:	fb03 f301 	mul.w	r3, r3, r1
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b21b      	sxth	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b21b      	sxth	r3, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	617b      	str	r3, [r7, #20]
			break;
 8003cea:	e044      	b.n	8003d76 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cfa:	330a      	adds	r3, #10
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fe0a 	bl	8003928 <move_window>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d12c      	bne.n	8003d74 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	009a      	lsls	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d24:	330a      	adds	r3, #10
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d2c:	fb03 f301 	mul.w	r3, r3, r1
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	3303      	adds	r3, #3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	061a      	lsls	r2, r3, #24
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	3302      	adds	r3, #2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	3201      	adds	r2, #1
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	0212      	lsls	r2, r2, #8
 8003d52:	4313      	orrs	r3, r2
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d5e:	617b      	str	r3, [r7, #20]
			break;
 8003d60:	e009      	b.n	8003d76 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 8003d62:	2301      	movs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e006      	b.n	8003d76 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d68:	bf00      	nop
 8003d6a:	e004      	b.n	8003d76 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d6c:	bf00      	nop
 8003d6e:	e002      	b.n	8003d76 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d70:	bf00      	nop
 8003d72:	e000      	b.n	8003d76 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d74:	bf00      	nop
		}
	}

	return val;
 8003d76:	697b      	ldr	r3, [r7, #20]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d907      	bls.n	8003da2 <put_fat+0x22>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d98:	3314      	adds	r3, #20
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <put_fat+0x28>
		res = FR_INT_ERR;
 8003da2:	2302      	movs	r3, #2
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e143      	b.n	8004030 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	f000 809a 	beq.w	8003eea <put_fat+0x16a>
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	f000 80d3 	beq.w	8003f62 <put_fat+0x1e2>
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	f040 812d 	bne.w	800401c <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4413      	add	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	330a      	adds	r3, #10
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dea:	4413      	add	r3, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fd9a 	bl	8003928 <move_window>
 8003df4:	4603      	mov	r3, r0
 8003df6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003df8:	7ffb      	ldrb	r3, [r7, #31]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 8111 	bne.w	8004022 <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	617a      	str	r2, [r7, #20]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e0c:	320a      	adds	r2, #10
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e14:	fb02 f201 	mul.w	r2, r2, r1
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <put_fat+0xc6>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	b25a      	sxtb	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	e001      	b.n	8003e4a <put_fat+0xca>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	3304      	adds	r3, #4
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	330a      	adds	r3, #10
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e74:	4413      	add	r3, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff fd55 	bl	8003928 <move_window>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 80ce 	bne.w	8004026 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e90:	330a      	adds	r3, #10
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e9c:	fb02 f201 	mul.w	r2, r2, r1
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <put_fat+0x13a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e00e      	b.n	8003ed8 <put_fat+0x158>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	b25a      	sxtb	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
			break;
 8003ee8:	e0a2      	b.n	8004030 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef8:	330a      	adds	r3, #10
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f08:	4413      	add	r3, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fd0b 	bl	8003928 <move_window>
 8003f12:	4603      	mov	r3, r0
 8003f14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f16:	7ffb      	ldrb	r3, [r7, #31]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 8086 	bne.w	800402a <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	005a      	lsls	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	330a      	adds	r3, #10
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f30:	fb03 f301 	mul.w	r3, r3, r1
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4413      	add	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
			break;
 8003f60:	e066      	b.n	8004030 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	330a      	adds	r3, #10
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f80:	4413      	add	r3, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff fccf 	bl	8003928 <move_window>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d14c      	bne.n	800402e <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	009a      	lsls	r2, r3, #2
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9e:	330a      	adds	r3, #10
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fa6:	fb03 f301 	mul.w	r3, r3, r1
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	061a      	lsls	r2, r3, #24
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	3201      	adds	r2, #1
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0c1a      	lsrs	r2, r3, #16
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	3302      	adds	r3, #2
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0e1a      	lsrs	r2, r3, #24
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3303      	adds	r3, #3
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	3304      	adds	r3, #4
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
			break;
 800401a:	e009      	b.n	8004030 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 800401c:	2302      	movs	r3, #2
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e006      	b.n	8004030 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800402e:	bf00      	nop
		}
	}

	return res;
 8004030:	7ffb      	ldrb	r3, [r7, #31]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d907      	bls.n	800405a <remove_chain+0x20>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004050:	3314      	adds	r3, #20
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <remove_chain+0x26>
		res = FR_INT_ERR;
 800405a:	2302      	movs	r3, #2
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e04f      	b.n	8004100 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004064:	e040      	b.n	80040e8 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fd87 	bl	8003b7c <get_fat>
 800406e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d041      	beq.n	80040fa <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <remove_chain+0x48>
 800407c:	2302      	movs	r3, #2
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e03e      	b.n	8004100 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d102      	bne.n	8004090 <remove_chain+0x56>
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
 800408e:	e037      	b.n	8004100 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004090:	2200      	movs	r2, #0
 8004092:	6839      	ldr	r1, [r7, #0]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe73 	bl	8003d80 <put_fat>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d12c      	bne.n	80040fe <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040aa:	3310      	adds	r3, #16
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d017      	beq.n	80040e4 <remove_chain+0xaa>
				fs->free_clust++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	3310      	adds	r3, #16
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c6:	3310      	adds	r3, #16
 80040c8:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	3305      	adds	r3, #5
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e0:	3305      	adds	r3, #5
 80040e2:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ee:	3314      	adds	r3, #20
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d3b6      	bcc.n	8004066 <remove_chain+0x2c>
 80040f8:	e002      	b.n	8004100 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <remove_chain+0xc6>
			if (res != FR_OK) break;
 80040fe:	bf00      	nop
		}
	}

	return res;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d113      	bne.n	8004142 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	330c      	adds	r3, #12
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <create_chain+0x32>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004132:	3314      	adds	r3, #20
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d31e      	bcc.n	800417a <create_chain+0x70>
 800413c:	2301      	movs	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e01b      	b.n	800417a <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fd19 	bl	8003b7c <get_fat>
 800414a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d801      	bhi.n	8004156 <create_chain+0x4c>
 8004152:	2301      	movs	r3, #1
 8004154:	e086      	b.n	8004264 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d101      	bne.n	8004162 <create_chain+0x58>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	e080      	b.n	8004264 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004168:	3314      	adds	r3, #20
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d201      	bcs.n	8004176 <create_chain+0x6c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	e076      	b.n	8004264 <create_chain+0x15a>
		scl = clst;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	3301      	adds	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	3314      	adds	r3, #20
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	d307      	bcc.n	80041a4 <create_chain+0x9a>
			ncl = 2;
 8004194:	2302      	movs	r3, #2
 8004196:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d901      	bls.n	80041a4 <create_chain+0x9a>
 80041a0:	2300      	movs	r3, #0
 80041a2:	e05f      	b.n	8004264 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fce8 	bl	8003b7c <get_fat>
 80041ac:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d002      	beq.n	80041c2 <create_chain+0xb8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <create_chain+0xbc>
			return cs;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	e04e      	b.n	8004264 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d1d7      	bne.n	800417e <create_chain+0x74>
 80041ce:	2300      	movs	r3, #0
 80041d0:	e048      	b.n	8004264 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80041d2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80041d4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80041d8:	6979      	ldr	r1, [r7, #20]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fdd0 	bl	8003d80 <put_fat>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <create_chain+0xf4>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d006      	beq.n	80041fe <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fdc3 	bl	8003d80 <put_fat>
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d126      	bne.n	8004252 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420a:	330c      	adds	r3, #12
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	3310      	adds	r3, #16
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d020      	beq.n	8004262 <create_chain+0x158>
			fs->free_clust--;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	3310      	adds	r3, #16
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004232:	3310      	adds	r3, #16
 8004234:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423c:	3305      	adds	r3, #5
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	3305      	adds	r3, #5
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e007      	b.n	8004262 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d102      	bne.n	800425e <create_chain+0x154>
 8004258:	f04f 33ff 	mov.w	r3, #4294967295
 800425c:	e000      	b.n	8004260 <create_chain+0x156>
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800427c:	3304      	adds	r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3304      	adds	r3, #4
 8004282:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	330a      	adds	r3, #10
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	fbb3 f2f2 	udiv	r2, r3, r2
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	3302      	adds	r3, #2
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1d1a      	adds	r2, r3, #4
 80042b6:	613a      	str	r2, [r7, #16]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <clmt_clust+0x5a>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e010      	b.n	80042e8 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d307      	bcc.n	80042de <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	3304      	adds	r3, #4
 80042da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042dc:	e7e9      	b.n	80042b2 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 80042de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004306:	3306      	adds	r3, #6
 8004308:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004310:	3308      	adds	r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d00a      	beq.n	8004332 <dir_sdi+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	3314      	adds	r3, #20
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	429a      	cmp	r2, r3
 8004330:	d301      	bcc.n	8004336 <dir_sdi+0x44>
		return FR_INT_ERR;
 8004332:	2302      	movs	r3, #2
 8004334:	e0b4      	b.n	80044a0 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d111      	bne.n	8004360 <dir_sdi+0x6e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d108      	bne.n	8004360 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800435a:	3304      	adds	r3, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d117      	bne.n	8004396 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004372:	3308      	adds	r3, #8
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4293      	cmp	r3, r2
 800437c:	d301      	bcc.n	8004382 <dir_sdi+0x90>
			return FR_INT_ERR;
 800437e:	2302      	movs	r3, #2
 8004380:	e08e      	b.n	80044a0 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800438e:	3304      	adds	r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	e046      	b.n	8004424 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a2:	330a      	adds	r3, #10
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b8:	3302      	adds	r3, #2
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	fb03 f302 	mul.w	r3, r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80043c2:	e022      	b.n	800440a <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff fbd4 	bl	8003b7c <get_fat>
 80043d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d101      	bne.n	80043e2 <dir_sdi+0xf0>
 80043de:	2301      	movs	r3, #1
 80043e0:	e05e      	b.n	80044a0 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d90a      	bls.n	80043fe <dir_sdi+0x10c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	3314      	adds	r3, #20
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d301      	bcc.n	8004402 <dir_sdi+0x110>
				return FR_INT_ERR;
 80043fe:	2302      	movs	r3, #2
 8004400:	e04e      	b.n	80044a0 <dir_sdi+0x1ae>
			idx -= ic;
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	429a      	cmp	r2, r3
 8004410:	d2d8      	bcs.n	80043c4 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fb86 	bl	8003b2e <clust2sect>
 8004422:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	330c      	adds	r3, #12
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <dir_sdi+0x148>
 8004436:	2302      	movs	r3, #2
 8004438:	e032      	b.n	80044a0 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004446:	330a      	adds	r3, #10
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	b29b      	uxth	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	fbb3 f2f2 	udiv	r2, r3, r2
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004460:	3310      	adds	r3, #16
 8004462:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447a:	330a      	adds	r3, #10
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	fbb3 f1f2 	udiv	r1, r3, r2
 800448a:	fb02 f201 	mul.w	r2, r2, r1
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	015b      	lsls	r3, r3, #5
 8004492:	18c2      	adds	r2, r0, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	3314      	adds	r3, #20
 800449c:	601a      	str	r2, [r3, #0]

	return FR_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	3306      	adds	r3, #6
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <dir_next+0x2e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	3310      	adds	r3, #16
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <dir_next+0x32>
		return FR_NO_FILE;
 80044d6:	2304      	movs	r3, #4
 80044d8:	e144      	b.n	8004764 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	330a      	adds	r3, #10
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80044f6:	fb02 f201 	mul.w	r2, r2, r1
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 810c 	bne.w	800471a <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004508:	3310      	adds	r3, #16
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	3310      	adds	r3, #16
 8004516:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451e:	330c      	adds	r3, #12
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10e      	bne.n	8004544 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	3308      	adds	r3, #8
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4293      	cmp	r3, r2
 800453c:	f0c0 80ed 	bcc.w	800471a <dir_next+0x272>
				return FR_NO_FILE;
 8004540:	2304      	movs	r3, #4
 8004542:	e10f      	b.n	8004764 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	330a      	adds	r3, #10
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456c:	3302      	adds	r3, #2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	3b01      	subs	r3, #1
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 80d0 	bne.w	800471a <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004588:	330c      	adds	r3, #12
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7ff faf4 	bl	8003b7c <get_fat>
 8004594:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d801      	bhi.n	80045a0 <dir_next+0xf8>
 800459c:	2302      	movs	r3, #2
 800459e:	e0e1      	b.n	8004764 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d101      	bne.n	80045ac <dir_next+0x104>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0db      	b.n	8004764 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b8:	3314      	adds	r3, #20
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	f0c0 8097 	bcc.w	80046f2 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <dir_next+0x126>
 80045ca:	2304      	movs	r3, #4
 80045cc:	e0ca      	b.n	8004764 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045dc:	330c      	adds	r3, #12
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7ff fd91 	bl	800410a <create_chain>
 80045e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <dir_next+0x14c>
 80045f0:	2307      	movs	r3, #7
 80045f2:	e0b7      	b.n	8004764 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <dir_next+0x156>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0b2      	b.n	8004764 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d101      	bne.n	800460a <dir_next+0x162>
 8004606:	2301      	movs	r3, #1
 8004608:	e0ac      	b.n	8004764 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff f92e 	bl	8003874 <sync_window>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <dir_next+0x17a>
 800461e:	2301      	movs	r3, #1
 8004620:	e0a0      	b.n	8004764 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004638:	330a      	adds	r3, #10
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	2100      	movs	r1, #0
 8004640:	f7fe fefd 	bl	800343e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	681c      	ldr	r4, [r3, #0]
 8004654:	6979      	ldr	r1, [r7, #20]
 8004656:	4610      	mov	r0, r2
 8004658:	f7ff fa69 	bl	8003b2e <clust2sect>
 800465c:	4602      	mov	r2, r0
 800465e:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004662:	330c      	adds	r3, #12
 8004664:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e024      	b.n	80046b6 <dir_next+0x20e>
						dp->fs->wflag = 1;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	3304      	adds	r3, #4
 800467a:	2201      	movs	r2, #1
 800467c:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff f8f4 	bl	8003874 <sync_window>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <dir_next+0x1ee>
 8004692:	2301      	movs	r3, #1
 8004694:	e066      	b.n	8004764 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 80046a2:	330c      	adds	r3, #12
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 80046ac:	330c      	adds	r3, #12
 80046ae:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	3301      	adds	r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c2:	3302      	adds	r3, #2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d3ce      	bcc.n	800466c <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046da:	330c      	adds	r3, #12
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	1a8a      	subs	r2, r1, r2
 80046ea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80046ee:	330c      	adds	r3, #12
 80046f0:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f8:	330c      	adds	r3, #12
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fa10 	bl	8003b2e <clust2sect>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	3310      	adds	r3, #16
 8004718:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	3306      	adds	r3, #6
 8004726:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473e:	330a      	adds	r3, #10
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	fbb3 f1f2 	udiv	r1, r3, r2
 800474e:	fb02 f201 	mul.w	r2, r2, r1
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	015b      	lsls	r3, r3, #5
 8004756:	18c2      	adds	r2, r0, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	3314      	adds	r3, #20
 8004760:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}

0800476c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004776:	2100      	movs	r1, #0
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fdba 	bl	80042f2 <dir_sdi>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d138      	bne.n	80047fa <dir_alloc+0x8e>
		n = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	3310      	adds	r3, #16
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff f8c1 	bl	8003928 <move_window>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d123      	bne.n	80047f8 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b6:	3314      	adds	r3, #20
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2be5      	cmp	r3, #229	; 0xe5
 80047be:	d007      	beq.n	80047d0 <dir_alloc+0x64>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	3314      	adds	r3, #20
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d102      	bne.n	80047e4 <dir_alloc+0x78>
 80047de:	e00c      	b.n	80047fa <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80047e0:	2300      	movs	r3, #0
 80047e2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80047e4:	2101      	movs	r1, #1
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fe5e 	bl	80044a8 <dir_next>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ca      	beq.n	800478c <dir_alloc+0x20>
 80047f6:	e000      	b.n	80047fa <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80047f8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b04      	cmp	r3, #4
 80047fe:	d101      	bne.n	8004804 <dir_alloc+0x98>
 8004800:	2307      	movs	r3, #7
 8004802:	73fb      	strb	r3, [r7, #15]
	return res;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	331b      	adds	r3, #27
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b21a      	sxth	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	331a      	adds	r3, #26
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b21b      	sxth	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b21b      	sxth	r3, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d10f      	bne.n	800485e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	3315      	adds	r3, #21
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b21a      	sxth	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	b21b      	sxth	r3, r3
 8004850:	4313      	orrs	r3, r2
 8004852:	b21b      	sxth	r3, r3
 8004854:	b29b      	uxth	r3, r3
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

	return cl;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	331a      	adds	r3, #26
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	331b      	adds	r3, #27
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	0c1a      	lsrs	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3314      	adds	r3, #20
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	b29b      	uxth	r3, r3
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3315      	adds	r3, #21
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
	...

080048b8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	2301      	movs	r3, #1
 80048de:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <cmp_lfn+0xd8>)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	b21a      	sxth	r2, r3
 80048f4:	4926      	ldr	r1, [pc, #152]	; (8004990 <cmp_lfn+0xd8>)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	440b      	add	r3, r1
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4619      	mov	r1, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	440b      	add	r3, r1
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	b21b      	sxth	r3, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	b21b      	sxth	r3, r3
 800490a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800490c:	89fb      	ldrh	r3, [r7, #14]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d019      	beq.n	8004946 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004912:	89bb      	ldrh	r3, [r7, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	f002 f923 	bl	8006b60 <ff_wtoupper>
 800491a:	4603      	mov	r3, r0
 800491c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2bfe      	cmp	r3, #254	; 0xfe
 8004922:	d80e      	bhi.n	8004942 <cmp_lfn+0x8a>
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	617a      	str	r2, [r7, #20]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f002 f914 	bl	8006b60 <ff_wtoupper>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	4293      	cmp	r3, r2
 8004940:	d008      	beq.n	8004954 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004942:	2300      	movs	r3, #0
 8004944:	e01f      	b.n	8004986 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494c:	4293      	cmp	r3, r2
 800494e:	d001      	beq.n	8004954 <cmp_lfn+0x9c>
 8004950:	2300      	movs	r3, #0
 8004952:	e018      	b.n	8004986 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3301      	adds	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d9bf      	bls.n	80048e0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00b      	beq.n	8004984 <cmp_lfn+0xcc>
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <cmp_lfn+0xcc>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <cmp_lfn+0xcc>
		return 0;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004984:	2301      	movs	r3, #1
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	08006d40 	.word	0x08006d40

08004994 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4611      	mov	r1, r2
 80049a0:	461a      	mov	r2, r3
 80049a2:	460b      	mov	r3, r1
 80049a4:	71fb      	strb	r3, [r7, #7]
 80049a6:	4613      	mov	r3, r2
 80049a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	330d      	adds	r3, #13
 80049ae:	79ba      	ldrb	r2, [r7, #6]
 80049b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	330b      	adds	r3, #11
 80049b6:	220f      	movs	r2, #15
 80049b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	330c      	adds	r3, #12
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	331a      	adds	r3, #26
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	331b      	adds	r3, #27
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	1e5a      	subs	r2, r3, #1
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	82fb      	strh	r3, [r7, #22]
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80049ea:	8afb      	ldrh	r3, [r7, #22]
 80049ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <fit_lfn+0x70>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	61fa      	str	r2, [r7, #28]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004a04:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <fit_lfn+0xe4>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	4413      	add	r3, r2
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4413      	add	r3, r2
 8004a12:	8afa      	ldrh	r2, [r7, #22]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	8afb      	ldrh	r3, [r7, #22]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b299      	uxth	r1, r3
 8004a1e:	4a16      	ldr	r2, [pc, #88]	; (8004a78 <fit_lfn+0xe4>)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	b2ca      	uxtb	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004a30:	8afb      	ldrh	r3, [r7, #22]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <fit_lfn+0xa8>
 8004a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d9d0      	bls.n	80049ea <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d006      	beq.n	8004a60 <fit_lfn+0xcc>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <fit_lfn+0xd4>
 8004a60:	79fb      	ldrb	r3, [r7, #7]
 8004a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a66:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	79fa      	ldrb	r2, [r7, #7]
 8004a6c:	701a      	strb	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	08006d40 	.word	0x08006d40

08004a7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	; 0x30
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004a8a:	220b      	movs	r2, #11
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7fe fcb8 	bl	8003404 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d92b      	bls.n	8004af2 <gen_numname+0x76>
		sr = seq;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004a9e:	e022      	b.n	8004ae6 <gen_numname+0x6a>
			wc = *lfn++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1c9a      	adds	r2, r3, #2
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	e017      	b.n	8004ae0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	005a      	lsls	r2, r3, #1
 8004ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004abe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ac0:	085b      	lsrs	r3, r3, #1
 8004ac2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <gen_numname+0x5e>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004ad4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004ad8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	3301      	adds	r3, #1
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	2b0f      	cmp	r3, #15
 8004ae4:	d9e4      	bls.n	8004ab0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1d8      	bne.n	8004aa0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004af2:	2307      	movs	r3, #7
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3330      	adds	r3, #48	; 0x30
 8004b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b0a:	2b39      	cmp	r3, #57	; 0x39
 8004b0c:	d904      	bls.n	8004b18 <gen_numname+0x9c>
 8004b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b12:	3307      	adds	r3, #7
 8004b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b22:	4413      	add	r3, r2
 8004b24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b28:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1de      	bne.n	8004af6 <gen_numname+0x7a>
	ns[i] = '~';
 8004b38:	f107 0214 	add.w	r2, r7, #20
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	4413      	add	r3, r2
 8004b40:	227e      	movs	r2, #126	; 0x7e
 8004b42:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e002      	b.n	8004b50 <gen_numname+0xd4>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d205      	bcs.n	8004b64 <gen_numname+0xe8>
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	4413      	add	r3, r2
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d1f2      	bne.n	8004b4a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b07      	cmp	r3, #7
 8004b68:	d808      	bhi.n	8004b7c <gen_numname+0x100>
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b74:	4413      	add	r3, r2
 8004b76:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004b7a:	e000      	b.n	8004b7e <gen_numname+0x102>
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	627a      	str	r2, [r7, #36]	; 0x24
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	460a      	mov	r2, r1
 8004b8a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	2b07      	cmp	r3, #7
 8004b90:	d9e8      	bls.n	8004b64 <gen_numname+0xe8>
}
 8004b92:	bf00      	nop
 8004b94:	3730      	adds	r7, #48	; 0x30
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004ba6:	230b      	movs	r3, #11
 8004ba8:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	0852      	lsrs	r2, r2, #1
 8004bb0:	01db      	lsls	r3, r3, #7
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	6079      	str	r1, [r7, #4]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	73fb      	strb	r3, [r7, #15]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ed      	bne.n	8004baa <sum_sfn+0x10>
	return sum;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004be2:	2100      	movs	r1, #0
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fb84 	bl	80042f2 <dir_sdi>
 8004bea:	4603      	mov	r3, r0
 8004bec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <dir_find+0x1e>
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	e0c1      	b.n	8004d7c <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004bf8:	23ff      	movs	r3, #255	; 0xff
 8004bfa:	753b      	strb	r3, [r7, #20]
 8004bfc:	7d3b      	ldrb	r3, [r7, #20]
 8004bfe:	757b      	strb	r3, [r7, #21]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c06:	3304      	adds	r3, #4
 8004c08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c0c:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7fe fe80 	bl	8003928 <move_window>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 809e 	bne.w	8004d70 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c46:	7dbb      	ldrb	r3, [r7, #22]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <dir_find+0x78>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	e093      	b.n	8004d7a <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	330b      	adds	r3, #11
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004c5e:	7dbb      	ldrb	r3, [r7, #22]
 8004c60:	2be5      	cmp	r3, #229	; 0xe5
 8004c62:	d007      	beq.n	8004c74 <dir_find+0x9a>
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00c      	beq.n	8004c88 <dir_find+0xae>
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d009      	beq.n	8004c88 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c74:	23ff      	movs	r3, #255	; 0xff
 8004c76:	757b      	strb	r3, [r7, #21]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c7e:	3304      	adds	r3, #4
 8004c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	e068      	b.n	8004d5a <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b0f      	cmp	r3, #15
 8004c8c:	d139      	bne.n	8004d02 <dir_find+0x128>
				if (dp->lfn) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d05f      	beq.n	8004d5a <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004c9a:	7dbb      	ldrb	r3, [r7, #22]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d012      	beq.n	8004cca <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	7b5b      	ldrb	r3, [r3, #13]
 8004ca8:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004caa:	7dbb      	ldrb	r3, [r7, #22]
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	75bb      	strb	r3, [r7, #22]
 8004cb2:	7dbb      	ldrb	r3, [r7, #22]
 8004cb4:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbc:	3306      	adds	r3, #6
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004cca:	7dba      	ldrb	r2, [r7, #22]
 8004ccc:	7d7b      	ldrb	r3, [r7, #21]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d114      	bne.n	8004cfc <dir_find+0x122>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	330d      	adds	r3, #13
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7d3a      	ldrb	r2, [r7, #20]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d10e      	bne.n	8004cfc <dir_find+0x122>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6939      	ldr	r1, [r7, #16]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fde5 	bl	80048b8 <cmp_lfn>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <dir_find+0x122>
 8004cf4:	7d7b      	ldrb	r3, [r7, #21]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e000      	b.n	8004cfe <dir_find+0x124>
 8004cfc:	23ff      	movs	r3, #255	; 0xff
 8004cfe:	757b      	strb	r3, [r7, #21]
 8004d00:	e02b      	b.n	8004d5a <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004d02:	7d7b      	ldrb	r3, [r7, #21]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <dir_find+0x13e>
 8004d08:	6938      	ldr	r0, [r7, #16]
 8004d0a:	f7ff ff46 	bl	8004b9a <sum_sfn>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	7d3b      	ldrb	r3, [r7, #20]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d02d      	beq.n	8004d74 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1e:	3318      	adds	r3, #24
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330b      	adds	r3, #11
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <dir_find+0x16e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	3318      	adds	r3, #24
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	220b      	movs	r2, #11
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6938      	ldr	r0, [r7, #16]
 8004d3e:	f7fe fb97 	bl	8003470 <mem_cmp>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d017      	beq.n	8004d78 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004d48:	23ff      	movs	r3, #255	; 0xff
 8004d4a:	757b      	strb	r3, [r7, #21]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d52:	3304      	adds	r3, #4
 8004d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d58:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fba3 	bl	80044a8 <dir_next>
 8004d62:	4603      	mov	r3, r0
 8004d64:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f43f af50 	beq.w	8004c0e <dir_find+0x34>
 8004d6e:	e004      	b.n	8004d7a <dir_find+0x1a0>
		if (res != FR_OK) break;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d78:	bf00      	nop

	return res;
 8004d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08c      	sub	sp, #48	; 0x30
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d92:	3318      	adds	r3, #24
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004da2:	f107 030c 	add.w	r3, r7, #12
 8004da6:	220c      	movs	r2, #12
 8004da8:	6a39      	ldr	r1, [r7, #32]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fb2a 	bl	8003404 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d039      	beq.n	8004e2e <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	330b      	adds	r3, #11
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8004dcc:	2301      	movs	r3, #1
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd0:	e013      	b.n	8004dfa <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004dd2:	f107 010c 	add.w	r1, r7, #12
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	6a38      	ldr	r0, [r7, #32]
 8004ddc:	f7ff fe4e 	bl	8004a7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fefa 	bl	8004bda <dir_find>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	3301      	adds	r3, #1
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	2b63      	cmp	r3, #99	; 0x63
 8004dfe:	d9e8      	bls.n	8004dd2 <dir_register+0x4e>
 8004e00:	e000      	b.n	8004e04 <dir_register+0x80>
			if (res != FR_OK) break;
 8004e02:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d101      	bne.n	8004e0e <dir_register+0x8a>
 8004e0a:	2307      	movs	r3, #7
 8004e0c:	e0e3      	b.n	8004fd6 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d002      	beq.n	8004e1c <dir_register+0x98>
 8004e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e1a:	e0dc      	b.n	8004fd6 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	330b      	adds	r3, #11
 8004e20:	7dfa      	ldrb	r2, [r7, #23]
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d014      	beq.n	8004e62 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3c:	e002      	b.n	8004e44 <dir_register+0xc0>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	3301      	adds	r3, #1
 8004e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f5      	bne.n	8004e3e <dir_register+0xba>
		nent = (n + 25) / 13;
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	3319      	adds	r3, #25
 8004e56:	4a62      	ldr	r2, [pc, #392]	; (8004fe0 <dir_register+0x25c>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	e001      	b.n	8004e66 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fc7f 	bl	800476c <dir_alloc>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d160      	bne.n	8004f3e <dir_register+0x1ba>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d05a      	beq.n	8004f3e <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8e:	3306      	adds	r3, #6
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fa29 	bl	80042f2 <dir_sdi>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d147      	bne.n	8004f3e <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fe6e 	bl	8004b9a <sum_sfn>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed0:	3310      	adds	r3, #16
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7fe fd26 	bl	8003928 <move_window>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d128      	bne.n	8004f3c <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef8:	3314      	adds	r3, #20
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	7efb      	ldrb	r3, [r7, #27]
 8004f02:	f7ff fd47 	bl	8004994 <fit_lfn>
				dp->fs->wflag = 1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f12:	3304      	adds	r3, #4
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fac4 	bl	80044a8 <dir_next>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d107      	bne.n	8004f3e <dir_register+0x1ba>
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	3b01      	subs	r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1c3      	bne.n	8004ec2 <dir_register+0x13e>
 8004f3a:	e000      	b.n	8004f3e <dir_register+0x1ba>
				if (res != FR_OK) break;
 8004f3c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d145      	bne.n	8004fd2 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f54:	3310      	adds	r3, #16
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fe fce4 	bl	8003928 <move_window>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d131      	bne.n	8004fd2 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f74:	3314      	adds	r3, #20
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fa5e 	bl	800343e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f88:	3314      	adds	r3, #20
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f92:	3318      	adds	r3, #24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	220b      	movs	r2, #11
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f7fe fa33 	bl	8003404 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330b      	adds	r3, #11
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	f002 0218 	and.w	r2, r2, #24
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8004fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3730      	adds	r7, #48	; 0x30
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	4ec4ec4f 	.word	0x4ec4ec4f

08004fe4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e002      	b.n	8004ffc <create_name+0x18>
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b2f      	cmp	r3, #47	; 0x2f
 8005002:	d0f8      	beq.n	8004ff6 <create_name+0x12>
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b5c      	cmp	r3, #92	; 0x5c
 800500a:	d0f4      	beq.n	8004ff6 <create_name+0x12>
	lfn = dp->lfn;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	61ba      	str	r2, [r7, #24]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800502c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800502e:	2b1f      	cmp	r3, #31
 8005030:	d92f      	bls.n	8005092 <create_name+0xae>
 8005032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005034:	2b2f      	cmp	r3, #47	; 0x2f
 8005036:	d02c      	beq.n	8005092 <create_name+0xae>
 8005038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800503a:	2b5c      	cmp	r3, #92	; 0x5c
 800503c:	d029      	beq.n	8005092 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2bfe      	cmp	r3, #254	; 0xfe
 8005042:	d901      	bls.n	8005048 <create_name+0x64>
			return FR_INVALID_NAME;
 8005044:	2306      	movs	r3, #6
 8005046:	e18b      	b.n	8005360 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800504a:	b2db      	uxtb	r3, r3
 800504c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800504e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fd4a 	bl	8006aec <ff_convert>
 8005058:	4603      	mov	r3, r0
 800505a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800505c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <create_name+0x82>
 8005062:	2306      	movs	r3, #6
 8005064:	e17c      	b.n	8005360 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005068:	2b7f      	cmp	r3, #127	; 0x7f
 800506a:	d809      	bhi.n	8005080 <create_name+0x9c>
 800506c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800506e:	4619      	mov	r1, r3
 8005070:	488f      	ldr	r0, [pc, #572]	; (80052b0 <create_name+0x2cc>)
 8005072:	f7fe fa23 	bl	80034bc <chk_chr>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <create_name+0x9c>
			return FR_INVALID_NAME;
 800507c:	2306      	movs	r3, #6
 800507e:	e16f      	b.n	8005360 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	617a      	str	r2, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800508e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005090:	e7c5      	b.n	800501e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	441a      	add	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800509c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800509e:	2b1f      	cmp	r3, #31
 80050a0:	d801      	bhi.n	80050a6 <create_name+0xc2>
 80050a2:	2304      	movs	r3, #4
 80050a4:	e000      	b.n	80050a8 <create_name+0xc4>
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80050ac:	e011      	b.n	80050d2 <create_name+0xee>
		w = lfn[di - 1];
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	3b01      	subs	r3, #1
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80050c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d002      	beq.n	80050cc <create_name+0xe8>
 80050c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050c8:	2b2e      	cmp	r3, #46	; 0x2e
 80050ca:	d106      	bne.n	80050da <create_name+0xf6>
		di--;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ea      	bne.n	80050ae <create_name+0xca>
 80050d8:	e000      	b.n	80050dc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80050da:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <create_name+0x102>
 80050e2:	2306      	movs	r3, #6
 80050e4:	e13c      	b.n	8005360 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	2200      	movs	r2, #0
 80050f0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	3318      	adds	r3, #24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	220b      	movs	r2, #11
 80050fe:	2120      	movs	r1, #32
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe f99c 	bl	800343e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e002      	b.n	8005112 <create_name+0x12e>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	3301      	adds	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	2b20      	cmp	r3, #32
 800511e:	d0f5      	beq.n	800510c <create_name+0x128>
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	2b2e      	cmp	r3, #46	; 0x2e
 800512c:	d0ee      	beq.n	800510c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <create_name+0x164>
 8005134:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005138:	f043 0303 	orr.w	r3, r3, #3
 800513c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005140:	e002      	b.n	8005148 <create_name+0x164>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3b01      	subs	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <create_name+0x17e>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005154:	3b01      	subs	r3, #1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	881b      	ldrh	r3, [r3, #0]
 800515e:	2b2e      	cmp	r3, #46	; 0x2e
 8005160:	d1ef      	bne.n	8005142 <create_name+0x15e>

	b = i = 0; ni = 8;
 8005162:	2300      	movs	r3, #0
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800516c:	2308      	movs	r3, #8
 800516e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	61ba      	str	r2, [r7, #24]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8092 	beq.w	80052ac <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800518a:	2b20      	cmp	r3, #32
 800518c:	d006      	beq.n	800519c <create_name+0x1b8>
 800518e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005190:	2b2e      	cmp	r3, #46	; 0x2e
 8005192:	d10a      	bne.n	80051aa <create_name+0x1c6>
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	429a      	cmp	r2, r3
 800519a:	d006      	beq.n	80051aa <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 800519c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a0:	f043 0303 	orr.w	r3, r3, #3
 80051a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051a8:	e07f      	b.n	80052aa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d203      	bcs.n	80051ba <create_name+0x1d6>
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d123      	bne.n	8005202 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b0b      	cmp	r3, #11
 80051be:	d106      	bne.n	80051ce <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 80051c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051c4:	f043 0303 	orr.w	r3, r3, #3
 80051c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051cc:	e077      	b.n	80052be <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d005      	beq.n	80051e2 <create_name+0x1fe>
 80051d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051da:	f043 0303 	orr.w	r3, r3, #3
 80051de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d868      	bhi.n	80052bc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	2308      	movs	r3, #8
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	230b      	movs	r3, #11
 80051f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80051f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005200:	e053      	b.n	80052aa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005204:	2b7f      	cmp	r3, #127	; 0x7f
 8005206:	d914      	bls.n	8005232 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fc6d 	bl	8006aec <ff_convert>
 8005212:	4603      	mov	r3, r0
 8005214:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <create_name+0x242>
 800521c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800521e:	3b80      	subs	r3, #128	; 0x80
 8005220:	4a24      	ldr	r2, [pc, #144]	; (80052b4 <create_name+0x2d0>)
 8005222:	5cd3      	ldrb	r3, [r2, r3]
 8005224:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <create_name+0x264>
 8005238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800523a:	4619      	mov	r1, r3
 800523c:	481e      	ldr	r0, [pc, #120]	; (80052b8 <create_name+0x2d4>)
 800523e:	f7fe f93d 	bl	80034bc <chk_chr>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005248:	235f      	movs	r3, #95	; 0x5f
 800524a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800524c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005250:	f043 0303 	orr.w	r3, r3, #3
 8005254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005258:	e01b      	b.n	8005292 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800525a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d909      	bls.n	8005274 <create_name+0x290>
 8005260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005262:	2b5a      	cmp	r3, #90	; 0x5a
 8005264:	d806      	bhi.n	8005274 <create_name+0x290>
					b |= 2;
 8005266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800526a:	f043 0302 	orr.w	r3, r3, #2
 800526e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005272:	e00e      	b.n	8005292 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005276:	2b60      	cmp	r3, #96	; 0x60
 8005278:	d90b      	bls.n	8005292 <create_name+0x2ae>
 800527a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800527c:	2b7a      	cmp	r3, #122	; 0x7a
 800527e:	d808      	bhi.n	8005292 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800528c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800528e:	3b20      	subs	r3, #32
 8005290:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005298:	3318      	adds	r3, #24
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	1c59      	adds	r1, r3, #1
 80052a0:	6239      	str	r1, [r7, #32]
 80052a2:	4413      	add	r3, r2
 80052a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80052aa:	e761      	b.n	8005170 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 80052ac:	bf00      	nop
 80052ae:	e006      	b.n	80052be <create_name+0x2da>
 80052b0:	08006c68 	.word	0x08006c68
 80052b4:	08006cc0 	.word	0x08006cc0
 80052b8:	08006c74 	.word	0x08006c74
			if (si > di) break;			/* No extension */
 80052bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c4:	3318      	adds	r3, #24
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2be5      	cmp	r3, #229	; 0xe5
 80052cc:	d106      	bne.n	80052dc <create_name+0x2f8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	3318      	adds	r3, #24
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2205      	movs	r2, #5
 80052da:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d104      	bne.n	80052ec <create_name+0x308>
 80052e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d005      	beq.n	8005304 <create_name+0x320>
 80052f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d105      	bne.n	8005310 <create_name+0x32c>
		cf |= NS_LFN;
 8005304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d117      	bne.n	800534c <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800531c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <create_name+0x350>
 8005328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800532c:	f043 0310 	orr.w	r3, r3, #16
 8005330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005338:	f003 030c 	and.w	r3, r3, #12
 800533c:	2b04      	cmp	r3, #4
 800533e:	d105      	bne.n	800534c <create_name+0x368>
 8005340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005344:	f043 0308 	orr.w	r3, r3, #8
 8005348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005352:	3318      	adds	r3, #24
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330b      	adds	r3, #11
 8005358:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800535c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800535e:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005360:	4618      	mov	r0, r3
 8005362:	3728      	adds	r7, #40	; 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b2f      	cmp	r3, #47	; 0x2f
 8005378:	d003      	beq.n	8005382 <follow_path+0x1a>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b5c      	cmp	r3, #92	; 0x5c
 8005380:	d102      	bne.n	8005388 <follow_path+0x20>
		path++;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538e:	3308      	adds	r3, #8
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b1f      	cmp	r3, #31
 800539a:	d80c      	bhi.n	80053b6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800539c:	2100      	movs	r1, #0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fe ffa7 	bl	80042f2 <dir_sdi>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ae:	3314      	adds	r3, #20
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e04c      	b.n	8005450 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053b6:	463b      	mov	r3, r7
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fe12 	bl	8004fe4 <create_name>
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d13d      	bne.n	8005446 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff fc05 	bl	8004bda <dir_find>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053da:	3318      	adds	r3, #24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	7adb      	ldrb	r3, [r3, #11]
 80053e0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d12d      	bne.n	800544a <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d128      	bne.n	800544a <follow_path+0xe2>
 80053f8:	2305      	movs	r3, #5
 80053fa:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80053fc:	e025      	b.n	800544a <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d122      	bne.n	800544e <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540e:	3314      	adds	r3, #20
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	330b      	adds	r3, #11
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005422:	2305      	movs	r3, #5
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e013      	b.n	8005450 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f9eb 	bl	800480e <ld_clust>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005440:	3308      	adds	r3, #8
 8005442:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005444:	e7b7      	b.n	80053b6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <follow_path+0xe8>
				break;
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800544e:	bf00      	nop
		}
	}

	return res;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
 8005466:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d031      	beq.n	80054d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e002      	b.n	800547e <get_ldnumber+0x24>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3301      	adds	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b1f      	cmp	r3, #31
 8005484:	d903      	bls.n	800548e <get_ldnumber+0x34>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b3a      	cmp	r3, #58	; 0x3a
 800548c:	d1f4      	bne.n	8005478 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b3a      	cmp	r3, #58	; 0x3a
 8005494:	d11c      	bne.n	80054d0 <get_ldnumber+0x76>
			tp = *path;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	60fa      	str	r2, [r7, #12]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	3b30      	subs	r3, #48	; 0x30
 80054a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	d80e      	bhi.n	80054cc <get_ldnumber+0x72>
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10a      	bne.n	80054cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d107      	bne.n	80054cc <get_ldnumber+0x72>
					vol = (int)i;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3301      	adds	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	e002      	b.n	80054d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80054d4:	693b      	ldr	r3, [r7, #16]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	3304      	adds	r3, #4
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054fc:	330c      	adds	r3, #12
 80054fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005502:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fe fa0e 	bl	8003928 <move_window>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <check_fs+0x36>
		return 3;
 8005512:	2303      	movs	r3, #3
 8005514:	e04a      	b.n	80055ac <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800551c:	3301      	adds	r3, #1
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	b21a      	sxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800552a:	b21b      	sxth	r3, r3
 800552c:	4313      	orrs	r3, r2
 800552e:	b21b      	sxth	r3, r3
 8005530:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <check_fs+0xd4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d001      	beq.n	800553a <check_fs+0x5a>
		return 2;
 8005536:	2302      	movs	r3, #2
 8005538:	e038      	b.n	80055ac <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3336      	adds	r3, #54	; 0x36
 800553e:	3303      	adds	r3, #3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	061a      	lsls	r2, r3, #24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3336      	adds	r3, #54	; 0x36
 8005548:	3302      	adds	r3, #2
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	4313      	orrs	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	3236      	adds	r2, #54	; 0x36
 8005554:	3201      	adds	r2, #1
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	0212      	lsls	r2, r2, #8
 800555a:	4313      	orrs	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005562:	4313      	orrs	r3, r2
 8005564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005568:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <check_fs+0xd8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d101      	bne.n	8005572 <check_fs+0x92>
		return 0;
 800556e:	2300      	movs	r3, #0
 8005570:	e01c      	b.n	80055ac <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3352      	adds	r3, #82	; 0x52
 8005576:	3303      	adds	r3, #3
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	061a      	lsls	r2, r3, #24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3352      	adds	r3, #82	; 0x52
 8005580:	3302      	adds	r3, #2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	4313      	orrs	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	3252      	adds	r2, #82	; 0x52
 800558c:	3201      	adds	r2, #1
 800558e:	7812      	ldrb	r2, [r2, #0]
 8005590:	0212      	lsls	r2, r2, #8
 8005592:	4313      	orrs	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800559a:	4313      	orrs	r3, r2
 800559c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <check_fs+0xd8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <check_fs+0xca>
		return 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e000      	b.n	80055ac <check_fs+0xcc>

	return 1;
 80055aa:	2301      	movs	r3, #1
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	ffffaa55 	.word	0xffffaa55
 80055b8:	00544146 	.word	0x00544146

080055bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b096      	sub	sp, #88	; 0x58
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055d0:	68b8      	ldr	r0, [r7, #8]
 80055d2:	f7ff ff42 	bl	800545a <get_ldnumber>
 80055d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da01      	bge.n	80055e2 <find_volume+0x26>
 80055de:	230b      	movs	r3, #11
 80055e0:	e33c      	b.n	8005c5c <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80055e2:	4ab3      	ldr	r2, [pc, #716]	; (80058b0 <find_volume+0x2f4>)
 80055e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <find_volume+0x3a>
 80055f2:	230c      	movs	r3, #12
 80055f4:	e332      	b.n	8005c5c <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01d      	beq.n	8005644 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	3301      	adds	r3, #1
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd fe58 	bl	80032c8 <disk_status>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800561e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <find_volume+0x84>
 8005630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800563c:	230a      	movs	r3, #10
 800563e:	e30d      	b.n	8005c5c <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8005640:	2300      	movs	r3, #0
 8005642:	e30b      	b.n	8005c5c <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	3301      	adds	r3, #1
 800565a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	3301      	adds	r3, #1
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fd fe48 	bl	80032fc <disk_initialize>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800567e:	2303      	movs	r3, #3
 8005680:	e2ec      	b.n	8005c5c <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <find_volume+0xdc>
 8005688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005694:	230a      	movs	r3, #10
 8005696:	e2e1      	b.n	8005c5c <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569e:	3301      	adds	r3, #1
 80056a0:	7818      	ldrb	r0, [r3, #0]
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a8:	330a      	adds	r3, #10
 80056aa:	461a      	mov	r2, r3
 80056ac:	2102      	movs	r1, #2
 80056ae:	f7fd fe8b 	bl	80033c8 <disk_ioctl>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056be:	330a      	adds	r3, #10
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c6:	d307      	bcc.n	80056d8 <find_volume+0x11c>
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ce:	330a      	adds	r3, #10
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d901      	bls.n	80056dc <find_volume+0x120>
 80056d8:	2301      	movs	r3, #1
 80056da:	e2bf      	b.n	8005c5c <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80056e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056e4:	f7ff fefc 	bl	80054e0 <check_fs>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80056ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d155      	bne.n	80057a2 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80056f6:	2300      	movs	r3, #0
 80056f8:	643b      	str	r3, [r7, #64]	; 0x40
 80056fa:	e029      	b.n	8005750 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80056fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005706:	4413      	add	r3, r2
 8005708:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	3304      	adds	r3, #4
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d012      	beq.n	800573a <find_volume+0x17e>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	330b      	adds	r3, #11
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	061a      	lsls	r2, r3, #24
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	330a      	adds	r3, #10
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	4313      	orrs	r3, r2
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	3209      	adds	r2, #9
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	0212      	lsls	r2, r2, #8
 800572e:	4313      	orrs	r3, r2
 8005730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005732:	3208      	adds	r2, #8
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	431a      	orrs	r2, r3
 8005738:	e000      	b.n	800573c <find_volume+0x180>
 800573a:	2200      	movs	r2, #0
 800573c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005744:	440b      	add	r3, r1
 8005746:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800574a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574c:	3301      	adds	r3, #1
 800574e:	643b      	str	r3, [r7, #64]	; 0x40
 8005750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005752:	2b03      	cmp	r3, #3
 8005754:	d9d2      	bls.n	80056fc <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005756:	2300      	movs	r3, #0
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <find_volume+0x1aa>
 8005760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005762:	3b01      	subs	r3, #1
 8005764:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800576e:	4413      	add	r3, r2
 8005770:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005774:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <find_volume+0x1cc>
 800577c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800577e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005780:	f7ff feae 	bl	80054e0 <check_fs>
 8005784:	4603      	mov	r3, r0
 8005786:	e000      	b.n	800578a <find_volume+0x1ce>
 8005788:	2302      	movs	r3, #2
 800578a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800578e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <find_volume+0x1e6>
 8005796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005798:	3301      	adds	r3, #1
 800579a:	643b      	str	r3, [r7, #64]	; 0x40
 800579c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d9e1      	bls.n	8005766 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d101      	bne.n	80057ae <find_volume+0x1f2>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e256      	b.n	8005c5c <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80057ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <find_volume+0x1fe>
 80057b6:	230d      	movs	r3, #13
 80057b8:	e250      	b.n	8005c5c <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	7b1b      	ldrb	r3, [r3, #12]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	b21a      	sxth	r2, r3
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	7adb      	ldrb	r3, [r3, #11]
 80057c6:	b21b      	sxth	r3, r3
 80057c8:	4313      	orrs	r3, r2
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d4:	330a      	adds	r3, #10
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 80057dc:	230d      	movs	r3, #13
 80057de:	e23d      	b.n	8005c5c <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	7ddb      	ldrb	r3, [r3, #23]
 80057e4:	021b      	lsls	r3, r3, #8
 80057e6:	b21a      	sxth	r2, r3
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	7d9b      	ldrb	r3, [r3, #22]
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	4313      	orrs	r3, r2
 80057f0:	b21b      	sxth	r3, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80057f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d112      	bne.n	8005822 <find_volume+0x266>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005802:	061a      	lsls	r2, r3, #24
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	4313      	orrs	r3, r2
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005814:	0212      	lsls	r2, r2, #8
 8005816:	4313      	orrs	r3, r2
 8005818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800581a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800581e:	4313      	orrs	r3, r2
 8005820:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	3318      	adds	r3, #24
 800582a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800582c:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	7c1a      	ldrb	r2, [r3, #16]
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005838:	3303      	adds	r3, #3
 800583a:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005842:	3303      	adds	r3, #3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d008      	beq.n	800585c <find_volume+0x2a0>
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005850:	3303      	adds	r3, #3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d001      	beq.n	800585c <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005858:	230d      	movs	r3, #13
 800585a:	e1ff      	b.n	8005c5c <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005862:	3303      	adds	r3, #3
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	7b5a      	ldrb	r2, [r3, #13]
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587a:	3302      	adds	r3, #2
 800587c:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005884:	3302      	adds	r3, #2
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00e      	beq.n	80058aa <find_volume+0x2ee>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005892:	3302      	adds	r3, #2
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	3302      	adds	r3, #2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80058aa:	230d      	movs	r3, #13
 80058ac:	e1d6      	b.n	8005c5c <find_volume+0x6a0>
 80058ae:	bf00      	nop
 80058b0:	20000040 	.word	0x20000040

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	7c9b      	ldrb	r3, [r3, #18]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b21a      	sxth	r2, r3
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	7c5b      	ldrb	r3, [r3, #17]
 80058c0:	b21b      	sxth	r3, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	b21b      	sxth	r3, r3
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ce:	3308      	adds	r3, #8
 80058d0:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d8:	3308      	adds	r3, #8
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e2:	330a      	adds	r3, #10
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80058ee:	fb03 f301 	mul.w	r3, r3, r1
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80058fa:	230d      	movs	r3, #13
 80058fc:	e1ae      	b.n	8005c5c <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	7d1b      	ldrb	r3, [r3, #20]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	b21a      	sxth	r2, r3
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	7cdb      	ldrb	r3, [r3, #19]
 800590a:	b21b      	sxth	r3, r3
 800590c:	4313      	orrs	r3, r2
 800590e:	b21b      	sxth	r3, r3
 8005910:	b29b      	uxth	r3, r3
 8005912:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005916:	2b00      	cmp	r3, #0
 8005918:	d112      	bne.n	8005940 <find_volume+0x384>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005920:	061a      	lsls	r2, r3, #24
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	4313      	orrs	r3, r2
 800592c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005932:	0212      	lsls	r2, r2, #8
 8005934:	4313      	orrs	r3, r2
 8005936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005938:	f892 2020 	ldrb.w	r2, [r2, #32]
 800593c:	4313      	orrs	r3, r2
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	7bdb      	ldrb	r3, [r3, #15]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	b21a      	sxth	r2, r3
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	7b9b      	ldrb	r3, [r3, #14]
 800594c:	b21b      	sxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b21b      	sxth	r3, r3
 8005952:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005954:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <find_volume+0x3a2>
 800595a:	230d      	movs	r3, #13
 800595c:	e17e      	b.n	8005c5c <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800595e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005962:	441a      	add	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596a:	3308      	adds	r3, #8
 800596c:	8819      	ldrh	r1, [r3, #0]
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	330a      	adds	r3, #10
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	b29b      	uxth	r3, r3
 800597c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005980:	b29b      	uxth	r3, r3
 8005982:	4413      	add	r3, r2
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	429a      	cmp	r2, r3
 800598c:	d201      	bcs.n	8005992 <find_volume+0x3d6>
 800598e:	230d      	movs	r3, #13
 8005990:	e164      	b.n	8005c5c <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	1ad2      	subs	r2, r2, r3
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599e:	3302      	adds	r3, #2
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <find_volume+0x3f6>
 80059ae:	230d      	movs	r3, #13
 80059b0:	e154      	b.n	8005c5c <find_volume+0x6a0>
	fmt = FS_FAT12;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 80059be:	4293      	cmp	r3, r2
 80059c0:	d902      	bls.n	80059c8 <find_volume+0x40c>
 80059c2:	2302      	movs	r3, #2
 80059c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d902      	bls.n	80059d8 <find_volume+0x41c>
 80059d2:	2303      	movs	r3, #3
 80059d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	3314      	adds	r3, #20
 80059e4:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ec:	331c      	adds	r3, #28
 80059ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059f0:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80059f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80059f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f6:	441a      	add	r2, r3
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059fe:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8005a00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	441a      	add	r2, r3
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8005a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d127      	bne.n	8005a68 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	3308      	adds	r3, #8
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <find_volume+0x46e>
 8005a26:	230d      	movs	r3, #13
 8005a28:	e118      	b.n	8005c5c <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005a42:	0212      	lsls	r2, r2, #8
 8005a44:	4313      	orrs	r3, r2
 8005a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a48:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a54:	3304      	adds	r3, #4
 8005a56:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5e:	3314      	adds	r3, #20
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
 8005a66:	e030      	b.n	8005aca <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6e:	3308      	adds	r3, #8
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <find_volume+0x4be>
 8005a76:	230d      	movs	r3, #13
 8005a78:	e0f0      	b.n	8005c5c <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a84:	441a      	add	r2, r3
 8005a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a88:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d106      	bne.n	8005aa6 <find_volume+0x4ea>
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	e010      	b.n	8005ac8 <find_volume+0x50c>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aac:	3314      	adds	r3, #20
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	085a      	lsrs	r2, r3, #1
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	3314      	adds	r3, #20
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	3318      	adds	r3, #24
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ada:	330a      	adds	r3, #10
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	440b      	add	r3, r1
 8005ae4:	1e59      	subs	r1, r3, #1
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	330a      	adds	r3, #10
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d201      	bcs.n	8005afc <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8005af8:	230d      	movs	r3, #13
 8005afa:	e0af      	b.n	8005c5c <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	3310      	adds	r3, #16
 8005b04:	f04f 32ff 	mov.w	r2, #4294967295
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b10:	3310      	adds	r3, #16
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b24:	3305      	adds	r3, #5
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005b2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d17d      	bne.n	8005c2e <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d170      	bne.n	8005c2e <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b4e:	3301      	adds	r3, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b54:	f7fd fee8 	bl	8003928 <move_window>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d167      	bne.n	8005c2e <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b64:	3305      	adds	r3, #5
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	b21a      	sxth	r2, r3
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b21b      	sxth	r3, r3
 8005b80:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <find_volume+0x6a8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d153      	bne.n	8005c2e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	061a      	lsls	r2, r3, #24
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	789b      	ldrb	r3, [r3, #2]
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	4313      	orrs	r3, r2
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	7852      	ldrb	r2, [r2, #1]
 8005b98:	0212      	lsls	r2, r2, #8
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	4a31      	ldr	r2, [pc, #196]	; (8005c68 <find_volume+0x6ac>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d142      	bne.n	8005c2e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005baa:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005bae:	061a      	lsls	r2, r3, #24
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbc:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005bc0:	0212      	lsls	r2, r2, #8
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc6:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <find_volume+0x6b0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d12d      	bne.n	8005c2e <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005bd8:	061a      	lsls	r2, r3, #24
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	4313      	orrs	r3, r2
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005bea:	0212      	lsls	r2, r2, #8
 8005bec:	4313      	orrs	r3, r2
 8005bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf0:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfc:	3310      	adds	r3, #16
 8005bfe:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005c06:	061a      	lsls	r2, r3, #24
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	4313      	orrs	r3, r2
 8005c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c14:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005c18:	0212      	lsls	r2, r2, #8
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005c22:	431a      	orrs	r2, r3
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c34:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <find_volume+0x6b4>)
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <find_volume+0x6b4>)
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <find_volume+0x6b4>)
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c50:	3306      	adds	r3, #6
 8005c52:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c56:	f7fd fde5 	bl	8003824 <clear_lock>
#endif

	return FR_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3758      	adds	r7, #88	; 0x58
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	ffffaa55 	.word	0xffffaa55
 8005c68:	41615252 	.word	0x41615252
 8005c6c:	61417272 	.word	0x61417272
 8005c70:	20000044 	.word	0x20000044

08005c74 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d02d      	beq.n	8005ce2 <validate+0x6e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d027      	beq.n	8005ce2 <validate+0x6e>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01e      	beq.n	8005ce2 <validate+0x6e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb0:	3306      	adds	r3, #6
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cba:	3304      	adds	r3, #4
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10f      	bne.n	8005ce2 <validate+0x6e>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cce:	3301      	adds	r3, #1
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd faf8 	bl	80032c8 <disk_status>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <validate+0x72>
		return FR_INVALID_OBJECT;
 8005ce2:	2309      	movs	r3, #9
 8005ce4:	e000      	b.n	8005ce8 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005d02:	f107 0310 	add.w	r3, r7, #16
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff fba7 	bl	800545a <get_ldnumber>
 8005d0c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da01      	bge.n	8005d18 <f_mount+0x28>
 8005d14:	230b      	movs	r3, #11
 8005d16:	e02f      	b.n	8005d78 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d18:	4a19      	ldr	r2, [pc, #100]	; (8005d80 <f_mount+0x90>)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d20:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005d28:	69b8      	ldr	r0, [r7, #24]
 8005d2a:	f7fd fd7b 	bl	8003824 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	490d      	ldr	r1, [pc, #52]	; (8005d80 <f_mount+0x90>)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <f_mount+0x6e>
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <f_mount+0x72>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e00a      	b.n	8005d78 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005d62:	f107 0108 	add.w	r1, r7, #8
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fc25 	bl	80055bc <find_volume>
 8005d72:	4603      	mov	r3, r0
 8005d74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000040 	.word	0x20000040

08005d84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	f107 0318 	add.w	r3, r7, #24
 8005d92:	3b0c      	subs	r3, #12
 8005d94:	6018      	str	r0, [r3, #0]
 8005d96:	f107 0318 	add.w	r3, r7, #24
 8005d9a:	3b10      	subs	r3, #16
 8005d9c:	6019      	str	r1, [r3, #0]
 8005d9e:	f107 0318 	add.w	r3, r7, #24
 8005da2:	3b11      	subs	r3, #17
 8005da4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005da6:	f107 0318 	add.w	r3, r7, #24
 8005daa:	3b0c      	subs	r3, #12
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <f_open+0x32>
 8005db2:	2309      	movs	r3, #9
 8005db4:	e319      	b.n	80063ea <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8005db6:	f107 0318 	add.w	r3, r7, #24
 8005dba:	3b0c      	subs	r3, #12
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005dc6:	f107 0318 	add.w	r3, r7, #24
 8005dca:	3b11      	subs	r3, #17
 8005dcc:	f107 0218 	add.w	r2, r7, #24
 8005dd0:	3a11      	subs	r2, #17
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	f002 021f 	and.w	r2, r2, #31
 8005dd8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005dda:	f107 0318 	add.w	r3, r7, #24
 8005dde:	3b11      	subs	r3, #17
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	f107 0118 	add.w	r1, r7, #24
 8005dec:	3910      	subs	r1, #16
 8005dee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005df2:	3b18      	subs	r3, #24
 8005df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fbdf 	bl	80055bc <find_volume>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e04:	f102 0217 	add.w	r2, r2, #23
 8005e08:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005e0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e0e:	f103 0317 	add.w	r3, r3, #23
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 82e3 	bne.w	80063e0 <f_open+0x65c>
		INIT_BUF(dj);
 8005e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e1e:	3b18      	subs	r3, #24
 8005e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e24:	3318      	adds	r3, #24
 8005e26:	f107 0218 	add.w	r2, r7, #24
 8005e2a:	3a04      	subs	r2, #4
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e32:	3b18      	subs	r3, #24
 8005e34:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e38:	4ad1      	ldr	r2, [pc, #836]	; (8006180 <f_open+0x3fc>)
 8005e3a:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e3c:	f107 0318 	add.w	r3, r7, #24
 8005e40:	3b10      	subs	r3, #16
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e48:	3b18      	subs	r3, #24
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fa8b 	bl	8005368 <follow_path>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e58:	f102 0217 	add.w	r2, r2, #23
 8005e5c:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e62:	3b18      	subs	r3, #24
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	3314      	adds	r3, #20
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e70:	f102 0210 	add.w	r2, r2, #16
 8005e74:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e7a:	f103 0317 	add.w	r3, r3, #23
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d126      	bne.n	8005ed2 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8005e84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005e88:	f103 0310 	add.w	r3, r3, #16
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <f_open+0x11c>
				res = FR_INVALID_NAME;
 8005e92:	2306      	movs	r3, #6
 8005e94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005e98:	f102 0217 	add.w	r2, r2, #23
 8005e9c:	7013      	strb	r3, [r2, #0]
 8005e9e:	e018      	b.n	8005ed2 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ea0:	f107 0318 	add.w	r3, r7, #24
 8005ea4:	3b11      	subs	r3, #17
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ebc:	3b18      	subs	r3, #24
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fd fb15 	bl	80034f0 <chk_lock>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005ecc:	f102 0217 	add.w	r2, r2, #23
 8005ed0:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ed2:	f107 0318 	add.w	r3, r7, #24
 8005ed6:	3b11      	subs	r3, #17
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f003 031c 	and.w	r3, r3, #28
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8150 	beq.w	8006184 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8005ee4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ee8:	f103 0317 	add.w	r3, r3, #23
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d030      	beq.n	8005f54 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005ef2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ef6:	f103 0317 	add.w	r3, r3, #23
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d112      	bne.n	8005f26 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005f00:	f7fd fb68 	bl	80035d4 <enq_lock>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <f_open+0x196>
 8005f0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f0e:	3b18      	subs	r3, #24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe ff37 	bl	8004d84 <dir_register>
 8005f16:	4603      	mov	r3, r0
 8005f18:	e000      	b.n	8005f1c <f_open+0x198>
 8005f1a:	2312      	movs	r3, #18
 8005f1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f20:	f102 0217 	add.w	r2, r2, #23
 8005f24:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005f26:	f107 0318 	add.w	r3, r7, #24
 8005f2a:	3b11      	subs	r3, #17
 8005f2c:	f107 0218 	add.w	r2, r7, #24
 8005f30:	3a11      	subs	r2, #17
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	f042 0208 	orr.w	r2, r2, #8
 8005f38:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005f3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f3e:	3b18      	subs	r3, #24
 8005f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f44:	3314      	adds	r3, #20
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f4c:	f102 0210 	add.w	r2, r2, #16
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e01f      	b.n	8005f94 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005f54:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f58:	f103 0310 	add.w	r3, r3, #16
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330b      	adds	r3, #11
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	f003 0311 	and.w	r3, r3, #17
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d006      	beq.n	8005f78 <f_open+0x1f4>
					res = FR_DENIED;
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f70:	f102 0217 	add.w	r2, r2, #23
 8005f74:	7013      	strb	r3, [r2, #0]
 8005f76:	e00d      	b.n	8005f94 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005f78:	f107 0318 	add.w	r3, r7, #24
 8005f7c:	3b11      	subs	r3, #17
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <f_open+0x210>
						res = FR_EXIST;
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005f8e:	f102 0217 	add.w	r2, r2, #23
 8005f92:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f94:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005f98:	f103 0317 	add.w	r3, r3, #23
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 8122 	bne.w	80061e8 <f_open+0x464>
 8005fa4:	f107 0318 	add.w	r3, r7, #24
 8005fa8:	3b11      	subs	r3, #17
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8119 	beq.w	80061e8 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8005fb6:	f7fc fc53 	bl	8002860 <get_fattime>
 8005fba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fbe:	f103 030c 	add.w	r3, r3, #12
 8005fc2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005fc4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fc8:	f103 0310 	add.w	r3, r3, #16
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330e      	adds	r3, #14
 8005fd0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005fd4:	f102 020c 	add.w	r2, r2, #12
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005fe2:	f103 030c 	add.w	r3, r3, #12
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005ff2:	f103 0310 	add.w	r3, r3, #16
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330f      	adds	r3, #15
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006002:	f103 030c 	add.w	r3, r3, #12
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	0c1a      	lsrs	r2, r3, #16
 800600a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800600e:	f103 0310 	add.w	r3, r3, #16
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3310      	adds	r3, #16
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800601e:	f103 030c 	add.w	r3, r3, #12
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	0e1a      	lsrs	r2, r3, #24
 8006026:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800602a:	f103 0310 	add.w	r3, r3, #16
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3311      	adds	r3, #17
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006036:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800603a:	f103 0310 	add.w	r3, r3, #16
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330b      	adds	r3, #11
 8006042:	2200      	movs	r2, #0
 8006044:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006046:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800604a:	f103 0310 	add.w	r3, r3, #16
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	331c      	adds	r3, #28
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800605a:	f103 0310 	add.w	r3, r3, #16
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	331d      	adds	r3, #29
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800606a:	f103 0310 	add.w	r3, r3, #16
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	331e      	adds	r3, #30
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800607a:	f103 0310 	add.w	r3, r3, #16
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	331f      	adds	r3, #31
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800608a:	3b18      	subs	r3, #24
 800608c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006096:	f102 0210 	add.w	r2, r2, #16
 800609a:	6811      	ldr	r1, [r2, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe fbb6 	bl	800480e <ld_clust>
 80060a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060a6:	f103 0308 	add.w	r3, r3, #8
 80060aa:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80060ac:	2100      	movs	r1, #0
 80060ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060b2:	f103 0310 	add.w	r3, r3, #16
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	f7fe fbd7 	bl	800486a <st_clust>
				dj.fs->wflag = 1;
 80060bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060c0:	3b18      	subs	r3, #24
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060cc:	3304      	adds	r3, #4
 80060ce:	2201      	movs	r2, #1
 80060d0:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80060d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80060d6:	f103 0308 	add.w	r3, r3, #8
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8083 	beq.w	80061e8 <f_open+0x464>
					dw = dj.fs->winsect;
 80060e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060e6:	3b18      	subs	r3, #24
 80060e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80060f2:	330c      	adds	r3, #12
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80060fa:	f102 020c 	add.w	r2, r2, #12
 80060fe:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006104:	3b18      	subs	r3, #24
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006110:	f102 0208 	add.w	r2, r2, #8
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd ff8f 	bl	800403a <remove_chain>
 800611c:	4603      	mov	r3, r0
 800611e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006122:	f102 0217 	add.w	r2, r2, #23
 8006126:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006128:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800612c:	f103 0317 	add.w	r3, r3, #23
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d158      	bne.n	80061e8 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006136:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800613a:	3b18      	subs	r3, #24
 800613c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006146:	f102 0208 	add.w	r2, r2, #8
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	3a01      	subs	r2, #1
 800614e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006152:	330c      	adds	r3, #12
 8006154:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8006156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800615a:	3b18      	subs	r3, #24
 800615c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006166:	f102 020c 	add.w	r2, r2, #12
 800616a:	6811      	ldr	r1, [r2, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd fbdb 	bl	8003928 <move_window>
 8006172:	4603      	mov	r3, r0
 8006174:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006178:	f102 0217 	add.w	r2, r2, #23
 800617c:	7013      	strb	r3, [r2, #0]
 800617e:	e033      	b.n	80061e8 <f_open+0x464>
 8006180:	20000060 	.word	0x20000060
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006184:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006188:	f103 0317 	add.w	r3, r3, #23
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d12a      	bne.n	80061e8 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006196:	f103 0310 	add.w	r3, r3, #16
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330b      	adds	r3, #11
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d006      	beq.n	80061b6 <f_open+0x432>
					res = FR_NO_FILE;
 80061a8:	2304      	movs	r3, #4
 80061aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061ae:	f102 0217 	add.w	r2, r2, #23
 80061b2:	7013      	strb	r3, [r2, #0]
 80061b4:	e018      	b.n	80061e8 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80061b6:	f107 0318 	add.w	r3, r7, #24
 80061ba:	3b11      	subs	r3, #17
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d010      	beq.n	80061e8 <f_open+0x464>
 80061c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80061ca:	f103 0310 	add.w	r3, r3, #16
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330b      	adds	r3, #11
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <f_open+0x464>
						res = FR_DENIED;
 80061dc:	2307      	movs	r3, #7
 80061de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80061e2:	f102 0217 	add.w	r2, r2, #23
 80061e6:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80061e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80061ec:	f103 0317 	add.w	r3, r3, #23
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d15b      	bne.n	80062ae <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80061f6:	f107 0318 	add.w	r3, r7, #24
 80061fa:	3b11      	subs	r3, #17
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d009      	beq.n	800621a <f_open+0x496>
				mode |= FA__WRITTEN;
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	3b11      	subs	r3, #17
 800620c:	f107 0218 	add.w	r2, r7, #24
 8006210:	3a11      	subs	r2, #17
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	f042 0220 	orr.w	r2, r2, #32
 8006218:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800621a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800621e:	3b18      	subs	r3, #24
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800622a:	330c      	adds	r3, #12
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	f107 0318 	add.w	r3, r7, #24
 8006232:	3b0c      	subs	r3, #12
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623a:	331c      	adds	r3, #28
 800623c:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800623e:	f107 0318 	add.w	r3, r7, #24
 8006242:	3b0c      	subs	r3, #12
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800624a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800624e:	f102 0210 	add.w	r2, r2, #16
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006256:	f107 0318 	add.w	r3, r7, #24
 800625a:	3b11      	subs	r3, #17
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	461a      	mov	r2, r3
 800626e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006272:	3b18      	subs	r3, #24
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd f9d0 	bl	800361c <inc_lock>
 800627c:	4602      	mov	r2, r0
 800627e:	f107 0318 	add.w	r3, r7, #24
 8006282:	3b0c      	subs	r3, #12
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800628a:	3308      	adds	r3, #8
 800628c:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 800628e:	f107 0318 	add.w	r3, r7, #24
 8006292:	3b0c      	subs	r3, #12
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800629a:	3308      	adds	r3, #8
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d105      	bne.n	80062ae <f_open+0x52a>
 80062a2:	2302      	movs	r3, #2
 80062a4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80062a8:	f102 0217 	add.w	r2, r2, #23
 80062ac:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80062ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80062b2:	f103 0317 	add.w	r3, r3, #23
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f040 8091 	bne.w	80063e0 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 80062be:	f107 0318 	add.w	r3, r7, #24
 80062c2:	3b0c      	subs	r3, #12
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	3306      	adds	r3, #6
 80062cc:	f107 0218 	add.w	r2, r7, #24
 80062d0:	3a11      	subs	r2, #17
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 80062d6:	f107 0318 	add.w	r3, r7, #24
 80062da:	3b0c      	subs	r3, #12
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	3307      	adds	r3, #7
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80062e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062ec:	3b18      	subs	r3, #24
 80062ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80062f8:	f102 0210 	add.w	r2, r2, #16
 80062fc:	6811      	ldr	r1, [r2, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fa85 	bl	800480e <ld_clust>
 8006304:	4602      	mov	r2, r0
 8006306:	f107 0318 	add.w	r3, r7, #24
 800630a:	3b0c      	subs	r3, #12
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006312:	3310      	adds	r3, #16
 8006314:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006316:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800631a:	f103 0310 	add.w	r3, r3, #16
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	331f      	adds	r3, #31
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	061a      	lsls	r2, r3, #24
 8006326:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800632a:	f103 0310 	add.w	r3, r3, #16
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	331e      	adds	r3, #30
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	4313      	orrs	r3, r2
 8006338:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800633c:	f102 0210 	add.w	r2, r2, #16
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	321d      	adds	r2, #29
 8006344:	7812      	ldrb	r2, [r2, #0]
 8006346:	0212      	lsls	r2, r2, #8
 8006348:	4313      	orrs	r3, r2
 800634a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800634e:	f102 0210 	add.w	r2, r2, #16
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	321c      	adds	r2, #28
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	431a      	orrs	r2, r3
 800635a:	f107 0318 	add.w	r3, r7, #24
 800635e:	3b0c      	subs	r3, #12
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006366:	330c      	adds	r3, #12
 8006368:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 800636a:	f107 0318 	add.w	r3, r7, #24
 800636e:	3b0c      	subs	r3, #12
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006376:	3308      	adds	r3, #8
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 800637c:	f107 0318 	add.w	r3, r7, #24
 8006380:	3b0c      	subs	r3, #12
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	3318      	adds	r3, #24
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800638e:	f107 0318 	add.w	r3, r7, #24
 8006392:	3b0c      	subs	r3, #12
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800639a:	3304      	adds	r3, #4
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80063a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063a4:	3b18      	subs	r3, #24
 80063a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f107 0318 	add.w	r3, r7, #24
 80063b0:	3b0c      	subs	r3, #12
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b8:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80063ba:	f107 0318 	add.w	r3, r7, #24
 80063be:	3b0c      	subs	r3, #12
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063cc:	3306      	adds	r3, #6
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	f107 0318 	add.w	r3, r7, #24
 80063d4:	3b0c      	subs	r3, #12
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063dc:	3304      	adds	r3, #4
 80063de:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 80063e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80063e4:	f103 0317 	add.w	r3, r3, #23
 80063e8:	781b      	ldrb	r3, [r3, #0]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop

080063f8 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	; 0x30
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff fc2f 	bl	8005c74 <validate>
 8006416:	4603      	mov	r3, r0
 8006418:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <f_read+0x2c>
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	e1fb      	b.n	800681c <f_read+0x424>
	if (fp->err)								/* Check error */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642a:	3307      	adds	r3, #7
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d005      	beq.n	800643e <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006438:	3307      	adds	r3, #7
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	e1ee      	b.n	800681c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006444:	3306      	adds	r3, #6
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006450:	2307      	movs	r3, #7
 8006452:	e1e3      	b.n	800681c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645a:	330c      	adds	r3, #12
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	3308      	adds	r3, #8
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	f240 81ce 	bls.w	8006812 <f_read+0x41a>
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800647a:	e1ca      	b.n	8006812 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006482:	3308      	adds	r3, #8
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006492:	330a      	adds	r3, #10
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	fbb2 f1f3 	udiv	r1, r2, r3
 800649a:	fb03 f301 	mul.w	r3, r3, r1
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 8160 	bne.w	8006766 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ac:	3308      	adds	r3, #8
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064bc:	330a      	adds	r3, #10
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d2:	3302      	adds	r3, #2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	4013      	ands	r3, r2
 80064dc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d14a      	bne.n	800657a <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ea:	3308      	adds	r3, #8
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f8:	3310      	adds	r3, #16
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fe:	e01f      	b.n	8006540 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006506:	3304      	adds	r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006514:	3308      	adds	r3, #8
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7fd fea6 	bl	800426c <clmt_clust>
 8006520:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006522:	e00d      	b.n	8006540 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006532:	3314      	adds	r3, #20
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fd fb1f 	bl	8003b7c <get_fat>
 800653e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d807      	bhi.n	8006556 <f_read+0x15e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654c:	3307      	adds	r3, #7
 800654e:	2202      	movs	r2, #2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	2302      	movs	r3, #2
 8006554:	e162      	b.n	800681c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d107      	bne.n	800656e <f_read+0x176>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006564:	3307      	adds	r3, #7
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	2301      	movs	r3, #1
 800656c:	e156      	b.n	800681c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006574:	3314      	adds	r3, #20
 8006576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006578:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	3314      	adds	r3, #20
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7fd facd 	bl	8003b2e <clust2sect>
 8006594:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d107      	bne.n	80065ac <f_read+0x1b4>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	3307      	adds	r3, #7
 80065a4:	2202      	movs	r2, #2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	2302      	movs	r3, #2
 80065aa:	e137      	b.n	800681c <f_read+0x424>
			sect += csect;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4413      	add	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c0:	330a      	adds	r3, #10
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d070      	beq.n	80066b6 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80065d4:	7dfa      	ldrb	r2, [r7, #23]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	441a      	add	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e6:	3302      	adds	r3, #2
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d90b      	bls.n	8006606 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fa:	3302      	adds	r3, #2
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006612:	3301      	adds	r3, #1
 8006614:	7818      	ldrb	r0, [r3, #0]
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	6a39      	ldr	r1, [r7, #32]
 800661c:	f7fc fe94 	bl	8003348 <disk_read>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662c:	3307      	adds	r3, #7
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	2301      	movs	r3, #1
 8006634:	e0f2      	b.n	800681c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663c:	3306      	adds	r3, #6
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d028      	beq.n	800669a <f_read+0x2a2>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	3318      	adds	r3, #24
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	429a      	cmp	r2, r3
 800665a:	d91e      	bls.n	800669a <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006662:	3318      	adds	r3, #24
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad2      	subs	r2, r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006676:	330a      	adds	r3, #10
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	fb03 f302 	mul.w	r3, r3, r2
 800667e:	6a3a      	ldr	r2, [r7, #32]
 8006680:	18d0      	adds	r0, r2, r3
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006690:	330a      	adds	r3, #10
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	f7fc feb5 	bl	8003404 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a6:	330a      	adds	r3, #10
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80066b4:	e093      	b.n	80067de <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066bc:	3318      	adds	r3, #24
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d049      	beq.n	800675a <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066cc:	3306      	adds	r3, #6
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d028      	beq.n	800672a <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e4:	3301      	adds	r3, #1
 80066e6:	7818      	ldrb	r0, [r3, #0]
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	3318      	adds	r3, #24
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	2301      	movs	r3, #1
 80066f6:	f7fc fe47 	bl	8003388 <disk_write>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006706:	3307      	adds	r3, #7
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	2301      	movs	r3, #1
 800670e:	e085      	b.n	800681c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006716:	3306      	adds	r3, #6
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	3306      	adds	r3, #6
 8006728:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	3301      	adds	r3, #1
 8006738:	7818      	ldrb	r0, [r3, #0]
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	2301      	movs	r3, #1
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	f7fc fe02 	bl	8003348 <disk_read>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006750:	3307      	adds	r3, #7
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	2301      	movs	r3, #1
 8006758:	e060      	b.n	800681c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006760:	3318      	adds	r3, #24
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006772:	330a      	adds	r3, #10
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	3308      	adds	r3, #8
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678e:	330a      	adds	r3, #10
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	fbb2 f1f3 	udiv	r1, r2, r3
 8006796:	fb03 f301 	mul.w	r3, r3, r1
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	1ac3      	subs	r3, r0, r3
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80067a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d901      	bls.n	80067ac <f_read+0x3b4>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	3308      	adds	r3, #8
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	330a      	adds	r3, #10
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80067ca:	fb03 f301 	mul.w	r3, r3, r1
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d6:	4619      	mov	r1, r3
 80067d8:	6a38      	ldr	r0, [r7, #32]
 80067da:	f7fc fe13 	bl	8003404 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	4413      	add	r3, r2
 80067e4:	623b      	str	r3, [r7, #32]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ec:	3308      	adds	r3, #8
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	441a      	add	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fa:	3308      	adds	r3, #8
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	441a      	add	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f ae31 	bne.w	800647c <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3730      	adds	r7, #48	; 0x30
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7ff fa21 	bl	8005c74 <validate>
 8006832:	4603      	mov	r3, r0
 8006834:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 80cc 	bne.w	80069d6 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006844:	3306      	adds	r3, #6
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80c2 	beq.w	80069d6 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006858:	3306      	adds	r3, #6
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d022      	beq.n	80068aa <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	3301      	adds	r3, #1
 8006872:	7818      	ldrb	r0, [r3, #0]
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687c:	3318      	adds	r3, #24
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2301      	movs	r3, #1
 8006882:	f7fc fd81 	bl	8003388 <disk_write>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800688c:	2301      	movs	r3, #1
 800688e:	e0a3      	b.n	80069d8 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	3306      	adds	r3, #6
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a6:	3306      	adds	r3, #6
 80068a8:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b8:	331c      	adds	r3, #28
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7fd f832 	bl	8003928 <move_window>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f040 8083 	bne.w	80069d6 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	330b      	adds	r3, #11
 80068de:	781a      	ldrb	r2, [r3, #0]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	330b      	adds	r3, #11
 80068e4:	f042 0220 	orr.w	r2, r2, #32
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f2:	330c      	adds	r3, #12
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	331c      	adds	r3, #28
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006904:	330c      	adds	r3, #12
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29a      	uxth	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	331d      	adds	r3, #29
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691c:	330c      	adds	r3, #12
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0c1a      	lsrs	r2, r3, #16
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	331e      	adds	r3, #30
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006930:	330c      	adds	r3, #12
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	0e1a      	lsrs	r2, r3, #24
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	331f      	adds	r3, #31
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006944:	3310      	adds	r3, #16
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7fd ff8d 	bl	800486a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006950:	f7fb ff86 	bl	8002860 <get_fattime>
 8006954:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3316      	adds	r3, #22
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	b29b      	uxth	r3, r3
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	b29a      	uxth	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3317      	adds	r3, #23
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	0c1a      	lsrs	r2, r3, #16
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3318      	adds	r3, #24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0e1a      	lsrs	r2, r3, #24
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3319      	adds	r3, #25
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3312      	adds	r3, #18
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	3313      	adds	r3, #19
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699e:	3306      	adds	r3, #6
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f023 0320 	bic.w	r3, r3, #32
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ae:	3306      	adds	r3, #6
 80069b0:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069be:	3304      	adds	r3, #4
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fc ffdf 	bl	8003990 <sync_fs>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff ff1b 	bl	8006824 <f_sync>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d119      	bne.n	8006a2c <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff f93b 	bl	8005c74 <validate>
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d111      	bne.n	8006a2c <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a0e:	3308      	adds	r3, #8
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fc fec2 	bl	800379c <dec_lock>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a50:	7a5b      	ldrb	r3, [r3, #9]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d831      	bhi.n	8006abc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a5a:	7a5b      	ldrb	r3, [r3, #9]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006a66:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4a16      	ldr	r2, [pc, #88]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a78:	7a5b      	ldrb	r3, [r3, #9]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a80:	4413      	add	r3, r2
 8006a82:	79fa      	ldrb	r2, [r7, #7]
 8006a84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a86:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a88:	7a5b      	ldrb	r3, [r3, #9]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	b2d1      	uxtb	r1, r2
 8006a90:	4a0d      	ldr	r2, [pc, #52]	; (8006ac8 <FATFS_LinkDriverEx+0x90>)
 8006a92:	7251      	strb	r1, [r2, #9]
 8006a94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a96:	7dbb      	ldrb	r3, [r7, #22]
 8006a98:	3330      	adds	r3, #48	; 0x30
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	223a      	movs	r2, #58	; 0x3a
 8006aa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3302      	adds	r3, #2
 8006aac:	222f      	movs	r2, #47	; 0x2f
 8006aae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3303      	adds	r3, #3
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	20000260 	.word	0x20000260

08006acc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ffac 	bl	8006a38 <FATFS_LinkDriverEx>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	2b7f      	cmp	r3, #127	; 0x7f
 8006afc:	d802      	bhi.n	8006b04 <ff_convert+0x18>
		c = chr;
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	81fb      	strh	r3, [r7, #14]
 8006b02:	e025      	b.n	8006b50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2bff      	cmp	r3, #255	; 0xff
 8006b0e:	d805      	bhi.n	8006b1c <ff_convert+0x30>
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	3b80      	subs	r3, #128	; 0x80
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <ff_convert+0x70>)
 8006b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1a:	e000      	b.n	8006b1e <ff_convert+0x32>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	81fb      	strh	r3, [r7, #14]
 8006b20:	e016      	b.n	8006b50 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8006b22:	2300      	movs	r3, #0
 8006b24:	81fb      	strh	r3, [r7, #14]
 8006b26:	e009      	b.n	8006b3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006b28:	89fb      	ldrh	r3, [r7, #14]
 8006b2a:	4a0c      	ldr	r2, [pc, #48]	; (8006b5c <ff_convert+0x70>)
 8006b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d006      	beq.n	8006b44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006b36:	89fb      	ldrh	r3, [r7, #14]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	81fb      	strh	r3, [r7, #14]
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b40:	d9f2      	bls.n	8006b28 <ff_convert+0x3c>
 8006b42:	e000      	b.n	8006b46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006b44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006b46:	89fb      	ldrh	r3, [r7, #14]
 8006b48:	3380      	adds	r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006b50:	89fb      	ldrh	r3, [r7, #14]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	08006d50 	.word	0x08006d50

08006b60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	4603      	mov	r3, r0
 8006b68:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e002      	b.n	8006b76 <ff_wtoupper+0x16>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <ff_wtoupper+0x54>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <ff_wtoupper+0x30>
 8006b82:	4a0c      	ldr	r2, [pc, #48]	; (8006bb4 <ff_wtoupper+0x54>)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b8a:	88fa      	ldrh	r2, [r7, #6]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d1ef      	bne.n	8006b70 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006b90:	4a08      	ldr	r2, [pc, #32]	; (8006bb4 <ff_wtoupper+0x54>)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <ff_wtoupper+0x46>
 8006b9c:	4a06      	ldr	r2, [pc, #24]	; (8006bb8 <ff_wtoupper+0x58>)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba4:	e000      	b.n	8006ba8 <ff_wtoupper+0x48>
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	08006e50 	.word	0x08006e50
 8006bb8:	08007030 	.word	0x08007030

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	4e0c      	ldr	r6, [pc, #48]	; (8006bf4 <__libc_init_array+0x38>)
 8006bc2:	4c0d      	ldr	r4, [pc, #52]	; (8006bf8 <__libc_init_array+0x3c>)
 8006bc4:	1ba4      	subs	r4, r4, r6
 8006bc6:	10a4      	asrs	r4, r4, #2
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	f000 f822 	bl	8006c14 <_init>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	4e0a      	ldr	r6, [pc, #40]	; (8006bfc <__libc_init_array+0x40>)
 8006bd4:	4c0a      	ldr	r4, [pc, #40]	; (8006c00 <__libc_init_array+0x44>)
 8006bd6:	1ba4      	subs	r4, r4, r6
 8006bd8:	10a4      	asrs	r4, r4, #2
 8006bda:	42a5      	cmp	r5, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006be4:	4798      	blx	r3
 8006be6:	3501      	adds	r5, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bee:	4798      	blx	r3
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	08007210 	.word	0x08007210
 8006bf8:	08007210 	.word	0x08007210
 8006bfc:	08007210 	.word	0x08007210
 8006c00:	08007214 	.word	0x08007214

08006c04 <memset>:
 8006c04:	4603      	mov	r3, r0
 8006c06:	4402      	add	r2, r0
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d100      	bne.n	8006c0e <memset+0xa>
 8006c0c:	4770      	bx	lr
 8006c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c12:	e7f9      	b.n	8006c08 <memset+0x4>

08006c14 <_init>:
 8006c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c16:	bf00      	nop
 8006c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1a:	bc08      	pop	{r3}
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	4770      	bx	lr

08006c20 <_fini>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	bf00      	nop
 8006c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c26:	bc08      	pop	{r3}
 8006c28:	469e      	mov	lr, r3
 8006c2a:	4770      	bx	lr
